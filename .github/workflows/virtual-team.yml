name: ü§ñ Virtual Team Collaboration

on:
  issues:
    types: [opened, closed, assigned, labeled]
  pull_request:
    types: [opened, closed, review_requested, ready_for_review]
  push:
    branches: [ main, develop ]
  schedule:
    # Daily team reports at 9 AM UTC
    - cron: '0 9 * * MON-FRI'

jobs:
  # ==========================================
  # üéØ Automatic Issue Triage & Assignment
  # ==========================================
  issue-triage:
    name: üéØ Issue Triage & Auto-Assignment
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'
    steps:
      - name: üè∑Ô∏è Auto-label based on content
        uses: actions/github-script@v6
        with:
          script: |
            const issue = context.payload.issue;
            const body = issue.body.toLowerCase();
            const title = issue.title.toLowerCase();
            
            const labels = [];
            
            // Bug detection
            if (body.includes('bug') || body.includes('error') || title.includes('bug')) {
              labels.push('bug');
            }
            
            // Feature requests
            if (body.includes('feature') || body.includes('enhancement') || title.includes('feature')) {
              labels.push('enhancement');
            }
            
            // Testing related
            if (body.includes('test') || title.includes('test')) {
              labels.push('testing');
            }
            
            // Performance issues
            if (body.includes('performance') || body.includes('slow') || title.includes('performance')) {
              labels.push('performance');
            }
            
            // Documentation
            if (body.includes('documentation') || body.includes('docs') || title.includes('doc')) {
              labels.push('documentation');
            }
            
            // Priority detection
            if (body.includes('urgent') || body.includes('critical') || title.includes('urgent')) {
              labels.push('priority:high');
            } else if (body.includes('minor') || title.includes('minor')) {
              labels.push('priority:low');
            } else {
              labels.push('priority:medium');
            }
            
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: labels
              });
            }
            
      - name: üë§ Smart Assignment
        uses: actions/github-script@v6
        with:
          script: |
            const issue = context.payload.issue;
            const body = issue.body.toLowerCase();
            const title = issue.title.toLowerCase();
            
            // Define team member expertise areas
            const teamMembers = {
              'frontend-dev': ['UI', 'component', 'react', 'css', 'responsive'],
              'backend-dev': ['API', 'calculation', 'python', 'data', 'excel'],
              'qa-engineer': ['test', 'bug', 'quality', 'automation'],
              'devops-engineer': ['deploy', 'ci/cd', 'github', 'workflow', 'performance']
            };
            
            // Find best match (replace with actual GitHub usernames)
            let bestMatch = null;
            let maxMatches = 0;
            
            for (const [role, keywords] of Object.entries(teamMembers)) {
              const matches = keywords.filter(keyword => 
                body.includes(keyword) || title.includes(keyword)
              ).length;
              
              if (matches > maxMatches) {
                maxMatches = matches;
                bestMatch = role;
              }
            }
            
            // Auto-assign if clear match
            if (bestMatch && maxMatches >= 2) {
              // Replace with actual team member mapping
              const assigneeMap = {
                'frontend-dev': 'GITHUB_USERNAME_FRONTEND',
                'backend-dev': 'GITHUB_USERNAME_BACKEND',
                'qa-engineer': 'GITHUB_USERNAME_QA',
                'devops-engineer': 'GITHUB_USERNAME_DEVOPS'
              };
              
              const assignee = assigneeMap[bestMatch];
              if (assignee && assignee !== 'GITHUB_USERNAME_PLACEHOLDER') {
                await github.rest.issues.addAssignees({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  assignees: [assignee]
                });
                
                // Add comment explaining auto-assignment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `ü§ñ **Auto-assigned based on content analysis**\n\nThis issue appears to be related to **${bestMatch.replace('-', ' ')}** based on the keywords detected. Feel free to reassign if needed!`
                });
              }
            }

  # ==========================================
  # üìä Pull Request Analysis & Code Review
  # ==========================================
  pr-analysis:
    name: üìä PR Analysis & Auto-Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: üìä Analyze PR changes
        uses: actions/github-script@v6
        with:
          script: |
            const { execSync } = require('child_process');
            
            // Get changed files
            const changedFiles = execSync('git diff --name-only HEAD~1 HEAD', { encoding: 'utf8' })
              .trim().split('\n').filter(Boolean);
            
            const pr = context.payload.pull_request;
            const analysis = {
              size: changedFiles.length,
              categories: {
                frontend: changedFiles.filter(f => f.match(/\.(tsx?|css|html)$/)).length,
                backend: changedFiles.filter(f => f.match(/\.py$/)).length,
                tests: changedFiles.filter(f => f.match(/\.(test|spec)\./)).length,
                config: changedFiles.filter(f => f.match(/\.(json|yml|yaml|config\.)$/)).length,
                docs: changedFiles.filter(f => f.match(/\.md$/)).length
              }
            };
            
            let reviewers = [];
            let labels = [];
            
            // Determine size label
            if (analysis.size <= 5) {
              labels.push('size:small');
            } else if (analysis.size <= 20) {
              labels.push('size:medium');
            } else {
              labels.push('size:large');
            }
            
            // Category-based labels and reviewers
            if (analysis.categories.frontend > 0) {
              labels.push('area:frontend');
              // reviewers.push('FRONTEND_REVIEWER'); // Replace with actual username
            }
            
            if (analysis.categories.backend > 0) {
              labels.push('area:backend');
              // reviewers.push('BACKEND_REVIEWER'); // Replace with actual username
            }
            
            if (analysis.categories.tests > 0) {
              labels.push('area:testing');
              // reviewers.push('QA_REVIEWER'); // Replace with actual username
            }
            
            if (analysis.categories.config > 0) {
              labels.push('area:infrastructure');
              // reviewers.push('DEVOPS_REVIEWER'); // Replace with actual username
            }
            
            // Apply labels
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: labels
              });
            }
            
            // Request reviews (uncomment when you have actual reviewers)
            /*
            if (reviewers.length > 0) {
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                reviewers: reviewers
              });
            }
            */
            
            // Post analysis comment
            const comment = `## ü§ñ Automated PR Analysis
            
            **Size:** ${analysis.size} files changed (${labels.find(l => l.startsWith('size:'))})
            
            **Areas affected:**
            ${analysis.categories.frontend > 0 ? `- üé® Frontend: ${analysis.categories.frontend} files` : ''}
            ${analysis.categories.backend > 0 ? `- ‚öôÔ∏è  Backend: ${analysis.categories.backend} files` : ''}
            ${analysis.categories.tests > 0 ? `- üß™ Tests: ${analysis.categories.tests} files` : ''}
            ${analysis.categories.config > 0 ? `- üîß Config: ${analysis.categories.config} files` : ''}
            ${analysis.categories.docs > 0 ? `- üìñ Docs: ${analysis.categories.docs} files` : ''}
            
            ${analysis.size > 20 ? '‚ö†Ô∏è  **Large PR detected** - Consider breaking into smaller PRs for easier review.' : ''}
            ${analysis.categories.tests === 0 && (analysis.categories.frontend > 0 || analysis.categories.backend > 0) ? '‚ö†Ô∏è  **No test changes detected** - Consider adding tests for new functionality.' : ''}
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: comment
            });

  # ==========================================
  # üìà Team Performance Dashboard
  # ==========================================
  daily-team-report:
    name: üìà Daily Team Report
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: üìä Generate team metrics
        uses: actions/github-script@v6
        with:
          script: |
            const today = new Date();
            const lastWeek = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
            
            // Get recent issues and PRs
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              since: lastWeek.toISOString(),
              per_page: 100
            });
            
            const prs = issues.data.filter(issue => issue.pull_request);
            const regularIssues = issues.data.filter(issue => !issue.pull_request);
            
            // Calculate metrics
            const metrics = {
              issues: {
                opened: regularIssues.filter(i => new Date(i.created_at) >= lastWeek).length,
                closed: regularIssues.filter(i => i.closed_at && new Date(i.closed_at) >= lastWeek).length,
                total_open: regularIssues.filter(i => i.state === 'open').length
              },
              prs: {
                opened: prs.filter(p => new Date(p.created_at) >= lastWeek).length,
                merged: prs.filter(p => p.closed_at && new Date(p.closed_at) >= lastWeek && p.pull_request.merged_at).length,
                total_open: prs.filter(p => p.state === 'open').length
              }
            };
            
            // Create team report
            const report = `# üìà Weekly Team Report - ${today.toDateString()}
            
            ## üéØ This Week's Metrics
            
            ### Issues
            - üÜï **Opened:** ${metrics.issues.opened}
            - ‚úÖ **Closed:** ${metrics.issues.closed}
            - üìã **Still Open:** ${metrics.issues.total_open}
            
            ### Pull Requests
            - üÜï **Opened:** ${metrics.prs.opened}
            - üéâ **Merged:** ${metrics.prs.merged}
            - üëÄ **Awaiting Review:** ${metrics.prs.total_open}
            
            ## üöÄ Team Velocity
            ${metrics.prs.merged > 0 ? `Great job on merging ${metrics.prs.merged} PRs this week!` : 'No PRs merged this week - let\\'s focus on completing current work.'}
            
            ## üìã Action Items
            ${metrics.issues.total_open > 10 ? '‚ö†Ô∏è  High number of open issues - consider prioritization session.' : ''}
            ${metrics.prs.total_open > 5 ? '‚ö†Ô∏è  Several PRs awaiting review - please prioritize reviews.' : ''}
            
            ---
            *This report is automatically generated every weekday at 9 AM UTC*
            `;
            
            // Post to team discussion (replace with your preferred notification method)
            console.log('Team Report Generated:', report);
            
            // Uncomment to post as GitHub Discussion or send to Slack
            /*
            // Example: Post to Slack
            await fetch(process.env.SLACK_WEBHOOK_URL, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ text: report })
            });
            */

  # ==========================================
  # üéâ Team Celebrations & Recognition
  # ==========================================
  celebrate-achievements:
    name: üéâ Celebrate Team Achievements
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    steps:
      - name: üéâ Celebrate merged PR
        uses: actions/github-script@v6
        with:
          script: |
            const pr = context.payload.pull_request;
            const author = pr.user.login;
            const celebrations = [
              `üéâ Awesome work @${author}! Another great contribution merged!`,
              `üöÄ Great job @${author}! Your code is now live!`,
              `‚≠ê Fantastic work @${author}! Keep up the excellent contributions!`,
              `üèÜ Well done @${author}! Another step forward for the team!`,
              `‚ú® Beautiful work @${author}! Thanks for making our codebase better!`
            ];
            
            const message = celebrations[Math.floor(Math.random() * celebrations.length)];
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: message
            });

  # ==========================================
  # üö® Issue Escalation & SLA Monitoring
  # ==========================================
  sla-monitoring:
    name: üö® SLA Monitoring & Escalation
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: üïê Check overdue issues
        uses: actions/github-script@v6
        with:
          script: |
            const now = new Date();
            const threeDaysAgo = new Date(now.getTime() - 3 * 24 * 60 * 60 * 1000);
            const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
            
            // Get all open issues
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });
            
            const overdueIssues = [];
            const stalledPRs = [];
            
            for (const issue of issues.data) {
              const createdDate = new Date(issue.created_at);
              const labels = issue.labels.map(l => l.name);
              
              if (issue.pull_request) {
                // Check for stalled PRs
                if (createdDate < oneWeekAgo) {
                  stalledPRs.push(issue);
                }
              } else {
                // Check for overdue issues
                const isHighPriority = labels.includes('priority:high');
                const isCritical = labels.includes('priority:critical');
                
                if ((isCritical && createdDate < threeDaysAgo) || 
                    (isHighPriority && createdDate < oneWeekAgo)) {
                  overdueIssues.push(issue);
                }
              }
            }
            
            // Add escalation labels and comments
            for (const issue of overdueIssues) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['needs-attention']
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `üö® **SLA Alert:** This issue has been open longer than expected based on its priority level. Please review and update status.`
              });
            }
            
            // Notify about stalled PRs
            for (const pr of stalledPRs) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `‚è∞ **Review Reminder:** This PR has been open for over a week. Please review or provide feedback to keep development moving.`
              });
            }
            
            console.log(`Found ${overdueIssues.length} overdue issues and ${stalledPRs.length} stalled PRs`);