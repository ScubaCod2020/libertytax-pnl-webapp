name: '04 ‚Üí Deploy to Production'

on:
  # Manual deployment only - no automatic triggers
  workflow_dispatch:
    inputs:
      deployment_reason:
        description: 'Reason for production deployment'
        required: true
        type: string
      emergency_deploy:
        description: 'Emergency deployment (skip staging validation)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'

jobs:
  # Only deploy to production from main branch with successful staging
  check-prerequisites:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      deployment_type: ${{ steps.check.outputs.deployment_type }}

    steps:
      - name: üîç Check production deployment prerequisites
        id: check
        run: |
          IS_MAIN_BRANCH="${{ github.ref == 'refs/heads/main' }}"
          EMERGENCY_DEPLOY="${{ inputs.emergency_deploy }}"
          DEPLOYMENT_REASON="${{ inputs.deployment_reason }}"

          echo "Main Branch: $IS_MAIN_BRANCH"  
          echo "Emergency Deploy: $EMERGENCY_DEPLOY"
          echo "Deployment Reason: $DEPLOYMENT_REASON"

          if [[ "$IS_MAIN_BRANCH" == "true" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            
            if [[ "$EMERGENCY_DEPLOY" == "true" ]]; then
              echo "deployment_type=emergency" >> $GITHUB_OUTPUT
              echo "üö® EMERGENCY DEPLOYMENT - Manual override initiated"
              echo "üö® Reason: $DEPLOYMENT_REASON"
            else
              echo "deployment_type=manual" >> $GITHUB_OUTPUT
              echo "‚úÖ MANUAL production deployment initiated"
              echo "üìã Reason: $DEPLOYMENT_REASON"
            fi
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "‚ùå Production deployment requirements not met"
            
            if [[ "$IS_MAIN_BRANCH" != "true" ]]; then
              echo "   - Not main branch (current: ${{ github.ref }})"
            fi
            if [[ "$STAGING_SUCCESS" != "true" && "$EMERGENCY_DEPLOY" != "true" ]]; then
              echo "   - Staging deployment failed and not emergency deploy"
            fi
          fi

  deploy-production:
    runs-on: ubuntu-latest
    needs: check-prerequisites
    if: needs.check-prerequisites.outputs.should_deploy == 'true'
    environment: production

    steps:
      - name: üîÑ Checkout code
        uses: actions/checkout@v4

      - name: üìã Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Download build artifacts (REUSE from build step)
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: .
        continue-on-error: true

      - name: üîç Verify or rebuild
        run: |
          if [ ! -d "dist" ] || [ "${{ needs.check-prerequisites.outputs.deployment_type }}" == "emergency" ]; then
            echo "üö® Missing artifacts or emergency deploy - rebuilding..."
            npm ci
            npm run build
            
            # Quick validation - Angular output directory
            DIST_DIR="dist/libertytax-pnl-angular/browser"
            INDEX_HTML="$DIST_DIR/index.html"
            [ -f "$INDEX_HTML" ] || (echo "‚ùå Build failed - missing $INDEX_HTML" && exit 1)
            echo "‚úÖ Manual build completed"
          else
            echo "‚úÖ Using existing build artifacts"
          fi

      - name: üöÄ Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        id: vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: üîç Production validation
        run: |
          echo "üîç Running production deployment validation..."

          # Wait for deployment to propagate globally
          echo "‚è≥ Waiting for global propagation (60s)..."
          sleep 60

          # Get production URL
          PROD_URL="https://libertytax-pnl-webapp.vercel.app"
          echo "üåê Testing production URL: $PROD_URL"

          # Comprehensive production checks
          echo "üß™ Running production validation suite..."

          # Test 1: Global accessibility
          MAX_RETRIES=3
          for i in $(seq 1 $MAX_RETRIES); do
            if curl -f -s "$PROD_URL" > /dev/null; then
              echo "‚úÖ Production site accessible (attempt $i)"
              break
            else
              echo "‚è≥ Production site not ready, retrying... ($i/$MAX_RETRIES)"
              if [ $i -eq $MAX_RETRIES ]; then
                echo "‚ùå Production deployment failed - site not accessible"
                exit 1
              fi
              sleep 30
            fi
          done

          # Test 2: Critical content validation
          RESPONSE=$(curl -s "$PROD_URL")

          echo "üîç Validating critical production content..."

          # HTML structure
          if echo "$RESPONSE" | grep -q "<!doctype html"; then
            echo "‚úÖ Valid HTML document structure"
          else
            echo "‚ùå Invalid HTML structure detected"
            exit 1
          fi

          # Core branding
          if echo "$RESPONSE" | grep -q "Liberty Tax"; then
            echo "‚úÖ Liberty Tax branding verified"
          else
            echo "‚ùå Missing Liberty Tax branding"
            exit 1
          fi

          # JavaScript bundles  
          if echo "$RESPONSE" | grep -q "main.*\.js"; then
            echo "‚úÖ JavaScript bundles loaded"
          else
            echo "‚ùå JavaScript bundles missing"
            exit 1
          fi

          # CSS bundles
          if echo "$RESPONSE" | grep -q "styles.*\.css"; then
            echo "‚úÖ CSS bundles loaded"
          else
            echo "‚ùå CSS bundles missing"
            exit 1
          fi

          # Angular app root
          if echo "$RESPONSE" | grep -E "<app-root|<title>" > /dev/null; then
            echo "‚úÖ Angular application mount point verified"
          else
            echo "‚ùå Angular application mount point missing"
            exit 1
          fi

          # Performance check (basic)
          RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' "$PROD_URL")
          echo "‚ö° Response time: ${RESPONSE_TIME}s"

          if (( $(echo "$RESPONSE_TIME < 3.0" | bc -l) )); then
            echo "‚úÖ Response time acceptable"
          else
            echo "‚ö†Ô∏è Slow response time detected"
          fi

          echo "‚úÖ All production validation checks passed!"
          echo "PROD_URL=$PROD_URL" >> $GITHUB_ENV

      - name: üìä Production deployment summary
        run: |
          DEPLOYMENT_TYPE="${{ needs.check-prerequisites.outputs.deployment_type }}"

          echo "## üöÄ Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "$DEPLOYMENT_TYPE" == "emergency" ]]; then
            echo "### üö® EMERGENCY DEPLOYMENT" >> $GITHUB_STEP_SUMMARY
            echo "‚ö†Ô∏è **This was an emergency deployment that bypassed normal staging validation**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Deployment** | ‚úÖ **Success** | Vercel production environment |" >> $GITHUB_STEP_SUMMARY
          echo "| **URL** | üåê **Live** | ${{ env.PROD_URL }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Content** | ‚úÖ **Validated** | All critical components verified |" >> $GITHUB_STEP_SUMMARY
          echo "| **Performance** | ‚úÖ **Tested** | Response time monitoring active |" >> $GITHUB_STEP_SUMMARY
          echo "| **Global CDN** | ‚úÖ **Active** | Vercel edge network propagated |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Post-Deployment Checklist:" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Monitor application performance for 24 hours" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Run manual spot checks on key user journeys" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Verify mobile compatibility on actual devices" >> $GITHUB_STEP_SUMMARY  
          echo "- [ ] Check analytics dashboard for user engagement" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Validate with stakeholders on critical business flows" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "**The Liberty Tax P&L webapp is now live in production! üéâ**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Production URL**: ${{ env.PROD_URL }}" >> $GITHUB_STEP_SUMMARY

  # Automated rollback on failure
  rollback-on-failure:
    runs-on: ubuntu-latest
    needs: [check-prerequisites, deploy-production]
    if: always() && needs.deploy-production.result == 'failure'

    steps:
      - name: üö® Deployment failure notification
        run: |
          echo "## üö® Production Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**The production deployment encountered critical errors and has been stopped.**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîß Immediate Actions Required:" >> $GITHUB_STEP_SUMMARY
          echo "1. **Review deployment logs** for specific error details" >> $GITHUB_STEP_SUMMARY
          echo "2. **Check Vercel dashboard** for infrastructure issues" >> $GITHUB_STEP_SUMMARY
          echo "3. **Verify previous production deployment** is still active" >> $GITHUB_STEP_SUMMARY
          echo "4. **Fix identified issues** in the codebase" >> $GITHUB_STEP_SUMMARY
          echo "5. **Re-run deployment** after fixes are confirmed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìû Escalation:" >> $GITHUB_STEP_SUMMARY
          echo "If this is a business-critical issue, consider manual rollback via Vercel dashboard." >> $GITHUB_STEP_SUMMARY
