name: Automated Issue Management

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types: [completed]
  schedule:
    # Run weekly to check for maintenance issues
    - cron: '0 9 * * 1'  # Monday 9 AM UTC
  workflow_dispatch:

jobs:
  create-issues-from-failures:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get failed workflow details
      id: workflow-details
      run: |
        echo "workflow_name=${{ github.event.workflow_run.name }}" >> $GITHUB_OUTPUT
        echo "run_url=${{ github.event.workflow_run.html_url }}" >> $GITHUB_OUTPUT
        echo "commit_sha=${{ github.event.workflow_run.head_sha }}" >> $GITHUB_OUTPUT
        
    - name: Create issue for test failure
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          
          // Check if similar issue already exists
          const existingIssues = await github.rest.issues.listForRepo({
            owner,
            repo,
            state: 'open',
            labels: 'automated,test-failure',
            per_page: 100
          });
          
          const workflowName = '${{ steps.workflow-details.outputs.workflow_name }}';
          const similarIssue = existingIssues.data.find(issue => 
            issue.title.includes(workflowName) && 
            issue.title.includes('Test Failure')
          );
          
          if (!similarIssue) {
            const issueBody = `
            ## ü§ñ Automated Test Failure Report
            
            **Workflow:** ${workflowName}
            **Run URL:** ${{ steps.workflow-details.outputs.run_url }}
            **Commit:** ${{ steps.workflow-details.outputs.commit_sha }}
            **Detected:** ${new Date().toISOString()}
            
            ### üìã Investigation Checklist
            - [ ] Review workflow logs
            - [ ] Identify root cause
            - [ ] Reproduce locally if needed
            - [ ] Fix underlying issue
            - [ ] Update tests if necessary
            - [ ] Verify fix with new test run
            
            ### üîç Potential Causes
            - [ ] Code changes broke existing functionality
            - [ ] Test environment issues
            - [ ] Dependency updates
            - [ ] Performance regression
            - [ ] Browser compatibility issues
            
            ### üìä Context
            This issue was automatically created when the CI workflow failed. Please investigate and resolve.
            
            **Auto-assigned labels:** automated, test-failure, needs-investigation
            `;
            
            const newIssue = await github.rest.issues.create({
              owner,
              repo,
              title: \`üö® Test Failure: \${workflowName} - \${new Date().toLocaleDateString()}\`,
              body: issueBody,
              labels: ['automated', 'test-failure', 'needs-investigation', 'high-priority'],
              assignees: ['${{ github.repository_owner }}']
            });
            
            console.log(\`Created issue #\${newIssue.data.number}\`);
          } else {
            console.log('Similar issue already exists, skipping creation');
          }

  create-maintenance-issues:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check for outdated dependencies
      id: outdated-deps
      run: |
        # Check for outdated packages
        OUTDATED=$(npm outdated --json || echo '{}')
        echo "outdated_packages<<EOF" >> $GITHUB_OUTPUT
        echo "$OUTDATED" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Check bundle size trends
      id: bundle-check
      run: |
        npm run build
        BUNDLE_SIZE=$(stat -c%s "dist/assets/index-*.js" | head -1)
        echo "current_bundle_size=$BUNDLE_SIZE" >> $GITHUB_OUTPUT
        
        # Compare with previous builds (simplified)
        if [ $BUNDLE_SIZE -gt 300000 ]; then
          echo "bundle_warning=true" >> $GITHUB_OUTPUT
        else
          echo "bundle_warning=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Create maintenance issues
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const outdatedPackages = JSON.parse('${{ steps.outdated-deps.outputs.outdated_packages }}');
          const bundleWarning = '${{ steps.bundle-check.outputs.bundle_warning }}' === 'true';
          const bundleSize = '${{ steps.bundle-check.outputs.current_bundle_size }}';
          
          // Create dependency update issue if needed
          if (Object.keys(outdatedPackages).length > 0) {
            const existingDepIssues = await github.rest.issues.listForRepo({
              owner, repo, state: 'open', labels: 'dependencies,automated'
            });
            
            if (existingDepIssues.data.length === 0) {
              const depList = Object.entries(outdatedPackages)
                .map(([pkg, info]) => \`- **\${pkg}**: \${info.current} ‚Üí \${info.latest}\`)
                .join('\\n');
                
              await github.rest.issues.create({
                owner, repo,
                title: "üì¶ Weekly Dependency Updates - " + new Date().toLocaleDateString(),
                body: "üîÑ Automated Dependency Update Check\\n\\nThe following packages have updates available:\\n\\n" + depList + "\\n\\nüìã Update Process:\\n- Review changelog for breaking changes\\n- Update packages: npm update\\n- Run full test suite\\n- Test in staging environment\\n\\nAuto-created: " + new Date().toISOString(),
                labels: ['dependencies', 'automated', 'maintenance'],
                assignees: ['${{ github.repository_owner }}']
              });
            }
          }
          
          // Create bundle size warning if needed
          if (bundleWarning) {
            const existingBundleIssues = await github.rest.issues.listForRepo({
              owner, repo, state: 'open', labels: 'performance,bundle-size'
            });
            
            if (existingBundleIssues.data.length === 0) {
              await github.rest.issues.create({
                owner, repo,
                title: "‚ö° Bundle Size Alert - " + Math.round(bundleSize/1024) + "KB",
                body: "üìä Bundle Size Performance Alert\\n\\nCurrent bundle size: " + Math.round(bundleSize/1024) + "KB\\nThreshold: 293KB\\n\\nüîç Investigation Steps:\\n- Analyze bundle composition\\n- Check for unnecessary dependencies\\n- Review code splitting opportunities\\n- Consider lazy loading\\n- Run bundle analyzer: npx vite-bundle-analyzer\\n\\nüéØ Optimization Targets:\\n- Remove unused dependencies\\n- Implement code splitting\\n- Optimize images and assets\\n\\nAuto-created: " + new Date().toISOString(),
                labels: ['performance', 'bundle-size', 'automated', 'optimization'],
                assignees: ['${{ github.repository_owner }}']
              });
            }
          }

  update-project-status:
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Update project status
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          
          // Get current issues
          const issues = await github.rest.issues.listForRepo({
            owner, repo, state: 'open', per_page: 100
          });
          
          const bugCount = issues.data.filter(i => i.labels.some(l => l.name === 'bug')).length;
          const testFailures = issues.data.filter(i => i.labels.some(l => l.name === 'test-failure')).length;
          const maintenance = issues.data.filter(i => i.labels.some(l => l.name === 'maintenance')).length;
          
          console.log(\`Project Status Update:\`);
          console.log(\`- Open bugs: \${bugCount}\`);
          console.log(\`- Test failures: \${testFailures}\`);
          console.log(\`- Maintenance items: \${maintenance}\`);
          
          // This could be used to update a project board or wiki page
