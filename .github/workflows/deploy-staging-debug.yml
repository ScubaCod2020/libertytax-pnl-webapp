name: Deploy to Staging (Debug Mode)

on:
  workflow_dispatch:
    inputs:
      debug_level:
        description: 'Debug level (basic/verbose/full)'
        required: true
        default: 'verbose'
        type: choice
        options:
        - basic
        - verbose
        - full
      skip_tests:
        description: 'Skip testing for faster deployment'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'
  DEBUG: 'true'

jobs:
  debug-environment:
    runs-on: ubuntu-latest
    steps:
    - name: üîç Debug Environment Info
      run: |
        echo "## üõ†Ô∏è Environment Debug Information" >> $GITHUB_STEP_SUMMARY
        echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY  
        echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Node Version | ${{ env.NODE_VERSION }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Runner OS | ${{ runner.os }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Debug Level | ${{ inputs.debug_level }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Skip Tests | ${{ inputs.skip_tests }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Branch | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Commit | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY

  build-and-test:
    runs-on: ubuntu-latest
    needs: debug-environment
    steps:
    - name: üîÑ Checkout code
      uses: actions/checkout@v4
      
    - name: üìã Setup Node.js with detailed logging
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: üì¶ Install dependencies with debug info
      run: |
        echo "üîç Installing dependencies..."
        if [ "${{ inputs.debug_level }}" = "full" ]; then
          npm ci --verbose
        else
          npm ci
        fi
        
        echo "üìä Dependency audit..."
        npm audit --audit-level moderate || echo "‚ö†Ô∏è Security warnings found but continuing..."
        
        echo "üìÅ Package sizes..."
        du -sh node_modules/
        
    - name: üèóÔ∏è Build with enhanced debugging
      run: |
        echo "üî® Starting build process..."
        
        if [ "${{ inputs.debug_level }}" = "full" ]; then
          npm run build -- --mode=development --debug
        else
          npm run build
        fi
        
        echo "üìä Build output analysis..."
        ls -la dist/
        ls -la dist/assets/
        
        echo "üìè Bundle size analysis..."
        for file in dist/assets/*.js; do
          if [ -f "$file" ]; then
            size=$(stat -c%s "$file")
            echo "$(basename "$file"): $size bytes ($(echo "scale=2; $size/1024" | bc)KB)"
          fi
        done
        
        echo "üéØ Checking bundle size limits..."
        LARGEST_BUNDLE=$(find dist/assets -name "*.js" -exec stat -c%s {} \; | sort -nr | head -1)
        MAX_SIZE=250000
        echo "Largest bundle: $LARGEST_BUNDLE bytes"
        echo "Max allowed: $MAX_SIZE bytes"
        
        if [ $LARGEST_BUNDLE -gt $MAX_SIZE ]; then
          echo "‚ùå Bundle size exceeds limit!"
          exit 1
        else
          echo "‚úÖ Bundle size within limits"
        fi

    - name: üß™ Run tests with detailed output
      if: ${{ !inputs.skip_tests }}
      run: |
        echo "üßÆ Running calculation tests..."
        if [ "${{ inputs.debug_level }}" != "basic" ]; then
          node scripts/test-calculations.js --verbose || echo "‚ö†Ô∏è Some calculation tests failed"
        fi
        
        echo "üîç Running edge case tests..."
        if [ "${{ inputs.debug_level }}" != "basic" ]; then
          node scripts/comprehensive-edge-case-tests.js --verbose || echo "‚ö†Ô∏è Some edge case tests failed"
        fi
        
        echo "üîÑ Running regression tests..."
        if [ "${{ inputs.debug_level }}" != "basic" ]; then
          node scripts/regression-test.js --verbose || echo "‚ö†Ô∏è Some regression tests failed"
        fi

    - name: üåê Test preview server startup
      run: |
        echo "üöÄ Testing preview server..."
        
        # Start preview server in background
        npm run preview &
        SERVER_PID=$!
        
        # Wait for server to start
        echo "‚è≥ Waiting for server to start..."
        for i in {1..30}; do
          if curl -s http://localhost:4173 > /dev/null; then
            echo "‚úÖ Server started successfully after ${i} seconds"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "‚ùå Server failed to start within 30 seconds"
            kill $SERVER_PID || true
            exit 1
          fi
          sleep 1
        done
        
        # Test basic functionality
        echo "üß™ Testing server response..."
        RESPONSE=$(curl -s http://localhost:4173)
        echo "Response length: ${#RESPONSE} characters"
        
        if echo "$RESPONSE" | grep -q "Liberty Tax"; then
          echo "‚úÖ Found Liberty Tax branding"
        else
          echo "‚ö†Ô∏è Liberty Tax branding not found"
        fi
        
        if echo "$RESPONSE" | grep -q "script"; then
          echo "‚úÖ JavaScript found in response"
        else
          echo "‚ùå No JavaScript found in response"
        fi
        
        # Clean up
        kill $SERVER_PID || true
        
    - name: üì§ Upload build artifacts for debugging
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-debug
        path: |
          dist/
          package-lock.json
          playwright-results.json
        retention-days: 3

  deploy-to-staging:
    runs-on: ubuntu-latest
    needs: build-and-test
    environment: staging
    steps:
    - name: üîÑ Checkout code
      uses: actions/checkout@v4
      
    - name: üìã Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: üì¶ Install and build
      run: |
        npm ci
        npm run build
        
    - name: üöÄ Deploy to Vercel Staging
      id: deploy
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        scope: ${{ secrets.VERCEL_ORG_ID }}
        
    - name: üß™ Post-deployment validation
      run: |
        echo "üîç Validating staging deployment..."
        
        # Get the deployment URL from Vercel action
        STAGING_URL="${{ steps.deploy.outputs.preview-url }}"
        if [ -z "$STAGING_URL" ]; then
          STAGING_URL="https://libertytax-pnl-webapp-staging.vercel.app"
        fi
        
        echo "Testing URL: $STAGING_URL"
        
        # Wait for deployment to be ready
        echo "‚è≥ Waiting for deployment to be ready..."
        for i in {1..60}; do
          if curl -s -f "$STAGING_URL" > /dev/null; then
            echo "‚úÖ Site accessible after ${i} seconds"
            break
          fi
          if [ $i -eq 60 ]; then
            echo "‚ùå Site failed to become accessible within 60 seconds"
            exit 1
          fi
          sleep 1
        done
        
        # Enhanced validation tests
        echo "üß™ Running validation tests..."
        RESPONSE=$(curl -s "$STAGING_URL")
        
        # Test 1: Basic HTML structure
        if echo "$RESPONSE" | grep -q "<!doctype html"; then
          echo "‚úÖ Valid HTML document"
        else
          echo "‚ùå Invalid HTML document"
          exit 1
        fi
        
        # Test 2: Liberty Tax branding
        if echo "$RESPONSE" | grep -q "Liberty Tax"; then
          echo "‚úÖ Liberty Tax branding found"
        else
          echo "‚ùå Liberty Tax branding missing"
          exit 1
        fi
        
        # Test 3: JavaScript bundles
        if echo "$RESPONSE" | grep -q "assets/index-.*\.js"; then
          echo "‚úÖ JavaScript bundle found"
        else
          echo "‚ùå JavaScript bundle missing"
          exit 1
        fi
        
        # Test 4: CSS bundles
        if echo "$RESPONSE" | grep -q "assets/index-.*\.css"; then
          echo "‚úÖ CSS bundle found"
        else
          echo "‚ùå CSS bundle missing"
          exit 1
        fi
        
        echo "üéØ All validation tests passed!"
        echo "üåê Staging URL: $STAGING_URL"
        
    - name: üìã Create deployment summary
      run: |
        echo "## üöÄ Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ‚úÖ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Item | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Build | ‚úÖ Success |" >> $GITHUB_STEP_SUMMARY
        echo "| Bundle Size | ‚úÖ Within limits |" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ inputs.skip_tests == 'true' && '‚è≠Ô∏è Skipped' || '‚úÖ Passed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Deployment | ‚úÖ Success |" >> $GITHUB_STEP_SUMMARY
        echo "| Validation | ‚úÖ All tests passed |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üåê Access Links" >> $GITHUB_STEP_SUMMARY
        echo "- **Staging URL**: ${{ steps.deploy.outputs.preview-url || 'https://libertytax-pnl-webapp-staging.vercel.app' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Debug Level**: ${{ inputs.debug_level }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Test the validation features we implemented" >> $GITHUB_STEP_SUMMARY
        echo "2. Verify input validation works correctly" >> $GITHUB_STEP_SUMMARY
        echo "3. Check error handling behavior" >> $GITHUB_STEP_SUMMARY
        echo "4. Validate accessibility improvements" >> $GITHUB_STEP_SUMMARY
