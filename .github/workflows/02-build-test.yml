name: '02 ‚Üí Build & Test'

on:
  workflow_run:
    workflows: ['01 ‚Üí Code Quality & Analysis']
    types: [completed]
    branches: [main, develop, 'feat/*', 'fix/*']
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'

jobs:
  # Only run if code quality passed
  check-prerequisites:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}

    steps:
      - name: üîç Check workflow prerequisites
        id: check
        run: |
          echo "should_build=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Code quality passed - proceeding with build"

  build-and-test:
    runs-on: ubuntu-latest
    needs: check-prerequisites
    if: needs.check-prerequisites.outputs.should_build == 'true'

    outputs:
      build_success: ${{ steps.build.outputs.success }}
      bundle_size: ${{ steps.build.outputs.bundle_size }}
      test_results: ${{ steps.test.outputs.results }}

    steps:
<<<<<<< HEAD
      - name: üîÑ Checkout code
        uses: actions/checkout@v4

      - name: üìã Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies (SHARED - build once)
        run: npm ci

      - name: üßÆ Run core calculation tests
        id: test
        run: |
          echo "üßÆ Testing calculation engine..."
          node scripts/test-calculations.js

          echo "üîç Testing edge cases..."  
          node scripts/comprehensive-edge-case-tests.js

          echo "üîÑ Testing regression scenarios..."
          node scripts/regression-test.js

          echo "results=passed" >> $GITHUB_OUTPUT
          echo "‚úÖ All calculation tests passed"

      - name: üèóÔ∏è Build application (SHARED - build once)
        id: build
        run: |
          echo "üèóÔ∏è Building application..."
          npm run build

          # Validate build artifacts
          [ -f "dist/index.html" ] || (echo "‚ùå Missing index.html" && exit 1)
          [ -f dist/assets/index-*.js ] || (echo "‚ùå Missing JavaScript bundle" && exit 1)
          [ -f dist/assets/index-*.css ] || (echo "‚ùå Missing CSS bundle" && exit 1)

          # Calculate bundle sizes
          MAIN_BUNDLE=$(find dist/assets -name "index-*.js" -exec stat -c%s {} \; | sort -n | tail -1)
          VENDOR_BUNDLE=$(find dist/assets -name "vendor-*.js" -exec stat -c%s {} \; | sort -n | tail -1 || echo "0")
          TOTAL_SIZE=$((MAIN_BUNDLE + VENDOR_BUNDLE))

          echo "bundle_size=$((TOTAL_SIZE / 1024))" >> $GITHUB_OUTPUT
          echo "success=true" >> $GITHUB_OUTPUT

          echo "## üìä Build Results" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Main Bundle | $((MAIN_BUNDLE / 1024))KB | $([ $MAIN_BUNDLE -lt 200000 ] && echo '‚úÖ Good' || echo '‚ö†Ô∏è Large') |" >> $GITHUB_STEP_SUMMARY
          echo "| Vendor Bundle | $((VENDOR_BUNDLE / 1024))KB | ‚úÖ Optimized |" >> $GITHUB_STEP_SUMMARY
          echo "| **Total Size** | **$((TOTAL_SIZE / 1024))KB** | **$([ $TOTAL_SIZE -lt 350000 ] && echo '‚úÖ Acceptable' || echo '‚ùå Too Large')** |" >> $GITHUB_STEP_SUMMARY

          if [ $TOTAL_SIZE -gt 350000 ]; then
            echo "‚ùå Bundle size exceeds 350KB limit"
            exit 1
=======
    - name: üîÑ Checkout code
      uses: actions/checkout@v4
      
    - name: üìã Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: üì¶ Install dependencies (SHARED - build once)
      run: npm ci
      
    - name: üßÆ Run core calculation tests
      id: test
      run: |
        echo "üßÆ Testing calculation engine..."
        node scripts/test-calculations.js
        
        echo "üîç Testing edge cases..."  
        node scripts/comprehensive-edge-case-tests.js
        
        echo "üîÑ Testing regression scenarios..."
        node scripts/regression-test.js
        
        echo "results=passed" >> $GITHUB_OUTPUT
        echo "‚úÖ All calculation tests passed"
        
    - name: üèóÔ∏è Build application (SHARED - build once)
      id: build
      run: |
        echo "üèóÔ∏è Building application..."
        npm run build

        # Set Angular dist paths
        DIST_DIR="dist/libertytax-pnl-angular/browser"
        INDEX_HTML="$DIST_DIR/index.html"

        # Validate build artifacts
        [ -f "$INDEX_HTML" ] || (echo "‚ùå Missing index.html at $INDEX_HTML" && exit 1)                            
        [ -f "$DIST_DIR"/main*.js ] || (echo "‚ùå Missing main JavaScript bundle" && exit 1)                
        [ -f "$DIST_DIR"/styles*.css ] || (echo "‚ùå Missing CSS bundle" && exit 1)                      

        # Calculate bundle sizes
        MAIN_BUNDLE=$(find "$DIST_DIR" -name "main*.js" -exec stat -c%s {} \; | sort -n | tail -1)    
        VENDOR_BUNDLE=$(find "$DIST_DIR" -name "vendor*.js" -exec stat -c%s {} \; | sort -n | tail -1 || echo "0")                                         
        TOTAL_SIZE=$((MAIN_BUNDLE + VENDOR_BUNDLE))
        
        echo "bundle_size=$((TOTAL_SIZE / 1024))" >> $GITHUB_OUTPUT
        echo "success=true" >> $GITHUB_OUTPUT
        
        echo "## üìä Build Results" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Main Bundle | $((MAIN_BUNDLE / 1024))KB | $([ $MAIN_BUNDLE -lt 200000 ] && echo '‚úÖ Good' || echo '‚ö†Ô∏è Large') |" >> $GITHUB_STEP_SUMMARY
        echo "| Vendor Bundle | $((VENDOR_BUNDLE / 1024))KB | ‚úÖ Optimized |" >> $GITHUB_STEP_SUMMARY
        echo "| **Total Size** | **$((TOTAL_SIZE / 1024))KB** | **$([ $TOTAL_SIZE -lt 350000 ] && echo '‚úÖ Acceptable' || echo '‚ùå Too Large')** |" >> $GITHUB_STEP_SUMMARY
        
        if [ $TOTAL_SIZE -gt 350000 ]; then
          echo "‚ùå Bundle size exceeds 350KB limit"
          exit 1
        fi
        
        echo "‚úÖ Build completed successfully"
        
    - name: üß™ Preview server test (SHARED - test once)
      run: |
        echo "üß™ Testing preview server..."
        
        # Start server in background
        npm run preview &
        SERVER_PID=$!
        
        # Wait for startup with timeout
        for i in {1..20}; do
          if curl -s http://localhost:4173 > /dev/null; then
            echo "‚úÖ Server started after ${i} seconds"
            break
>>>>>>> origin/cursor/enhance-github-testing-and-virtual-team-4d10_archive
          fi

          echo "‚úÖ Build completed successfully"

      - name: üß™ Preview server test (SHARED - test once)
        run: |
          echo "üß™ Testing preview server..."

          # Start server in background
          npm run preview &
          SERVER_PID=$!

          # Wait for startup with timeout
          for i in {1..20}; do
            if curl -s http://localhost:4173 > /dev/null; then
              echo "‚úÖ Server started after ${i} seconds"
              break
            fi
            if [ $i -eq 20 ]; then
              echo "‚ùå Server startup timeout"
              kill $SERVER_PID
              exit 1
            fi
            sleep 1
          done

          # Test critical functionality
          RESPONSE=$(curl -s http://localhost:4173)

          if echo "$RESPONSE" | grep -q "Liberty Tax"; then
            echo "‚úÖ Liberty Tax branding found"
          else
            echo "‚ùå Liberty Tax branding missing"
            kill $SERVER_PID
            exit 1
          fi
<<<<<<< HEAD

          if echo "$RESPONSE" | grep -q "script"; then
            echo "‚úÖ JavaScript bundle loaded"
          else
            echo "‚ùå JavaScript bundle missing"
            kill $SERVER_PID
            exit 1
          fi

          # Cleanup
          kill $SERVER_PID
          echo "‚úÖ Preview server tests passed"

      - name: üì¶ Upload build artifacts (SHARED)
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            dist/
            package.json
            package-lock.json
          retention-days: 7

      - name: üìä Test summary
        run: |
          echo "## ‚úÖ Build & Test Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üéØ **Ready for deployment!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts Created:" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Optimized production build (${{ steps.build.outputs.bundle_size }}KB)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Tested preview server" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Validated calculation engine" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Step**: Trigger staging deployment for validation" >> $GITHUB_STEP_SUMMARY
=======
          sleep 1
        done
        
        # Test critical functionality
        RESPONSE=$(curl -s http://localhost:4173)   

        if echo "$RESPONSE" | grep -E "<app-root|<title>" > /dev/null; then                                               
          echo "‚úÖ Angular app root found"      
        else
          echo "‚ùå Angular app root missing"    
          kill $SERVER_PID
          exit 1
        fi

        if echo "$RESPONSE" | grep -q "Liberty Tax"; then                                               
          echo "‚úÖ Liberty Tax branding found"      
        else
          echo "‚ùå Liberty Tax branding missing"    
          kill $SERVER_PID
          exit 1
        fi
        
        # Cleanup
        kill $SERVER_PID
        echo "‚úÖ Preview server tests passed"
        
    - name: üì¶ Upload build artifacts (SHARED)
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ github.sha }}
        path: |
          dist/libertytax-pnl-angular/browser/
          package.json
          package-lock.json
        retention-days: 7
        
    - name: üìä Test summary
      run: |
        echo "## ‚úÖ Build & Test Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üéØ **Ready for deployment!**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Artifacts Created:" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Optimized production build (${{ steps.build.outputs.bundle_size }}KB)" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Tested preview server" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Validated calculation engine" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Next Step**: Trigger staging deployment for validation" >> $GITHUB_STEP_SUMMARY
>>>>>>> origin/cursor/enhance-github-testing-and-virtual-team-4d10_archive
