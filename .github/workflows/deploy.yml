name: deploy

on:
  push:
    branches:
      - main
      - staging
      - 'feature/*'
      - 'fix/*'
      - 'chore/*'
  pull_request:
    branches:
      - main
      - staging
  workflow_dispatch:
    inputs:
      target_env:
        description: Where to deploy?
        type: choice
        required: true
        options: [Dev, Staging, Production]
        default: Dev

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  map-env:
    name: Select environment
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.detect.outputs.env_name }}
    steps:
      - id: detect
        name: Compute environment
        shell: bash
        run: |
          set -euo pipefail
          REF_NAME="${GITHUB_REF_NAME:-}"
          EVENT="${GITHUB_EVENT_NAME:-}"

          if [[ "$EVENT" == "workflow_dispatch" ]]; then
            case "${{ inputs.target_env }}" in
              Dev|dev|Preview|preview)          ENV_NAME="Preview" ;;
              Staging|staging)                  ENV_NAME="Staging" ;;
              Production|production|Prod|prod)  ENV_NAME="Production" ;;
              *)                                ENV_NAME="Preview" ;;
            esac
          elif [[ "$EVENT" == "pull_request" ]]; then
            ENV_NAME="Preview"
          elif [[ "$REF_NAME" == "staging" ]]; then
            ENV_NAME="Staging"
          elif [[ "$REF_NAME" == "main" || "$REF_NAME" == "master" ]]; then
            ENV_NAME="Production"
          else
            ENV_NAME="Preview"
          fi

          printf 'env_name=%s\n' "$ENV_NAME" >> "$GITHUB_OUTPUT"
          echo "Selected environment: $ENV_NAME"

  build:
    name: Build & Deploy
    needs: map-env
    runs-on: [self-hosted, unraid]
    environment:
      name: ${{ needs.map-env.outputs.env_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          # At least one of these should exist in this branch
          cache-dependency-path: |
            angular/package-lock.json
            package-lock.json
            apps/web/package-lock.json

      - name: Locate Angular workspace
        id: find_ng
        shell: bash
        run: |
          set -euo pipefail
          if [ -d angular ]; then
            DIR="angular"
          elif [ -f angular.json ]; then
            DIR="."
          else
            # fall back to searching
            CAND="$(git ls-files | grep -E '(^|/)angular\.json$' | head -n1 || true)"
            if [ -n "$CAND" ]; then
              DIR="$(dirname "$CAND")"
            else
              echo "❌ No angular.json found anywhere in the repo." >&2
              exit 1
            fi
          fi
          printf 'dir=%s\n' "$DIR" >> "$GITHUB_OUTPUT"
          echo "Angular workspace: $DIR"

      - name: Install deps (Angular)
        shell: bash
        working-directory: ${{ steps.find_ng.outputs.dir }}
        run: npm ci

      - name: Build (Angular)
        shell: bash
        working-directory: ${{ steps.find_ng.outputs.dir }}
        run: npx ng build --configuration "${{ vars.BUILD_CONFIGURATION || 'production' }}"

      - name: Resolve build output directory
        id: outdir
        shell: bash
        run: |
          # Fixed: Updated pattern to match Angular build structure
          # Test deployment after DIST_DIR variable fix - 2025-10-06
          set -euo pipefail
          ROOT="${{ steps.find_ng.outputs.dir }}"
          DEFAULT_PATTERN="$ROOT/dist/angular/browser"

          # Use repository variable DIST_DIR if set, otherwise use our corrected default
          PATTERN="${{ vars.DIST_DIR }}"
          if [ -z "${PATTERN:-}" ]; then 
            PATTERN="$DEFAULT_PATTERN"
            echo "Using default pattern: $PATTERN"
          else
            echo "Using repository variable DIST_DIR: $PATTERN"
          fi

          CANDIDATE="$(ls -d ${PATTERN} 2>/dev/null | head -n1 || true)"
          if [ -z "$CANDIDATE" ]; then
            echo "❌ Could not find build output using pattern: $PATTERN" >&2
            echo "Dist tree (3 levels) under $ROOT:"
            find "$ROOT/dist" -maxdepth 3 -type d -print 2>/dev/null || true
            exit 1
          fi

          printf 'outdir=%s\n' "$CANDIDATE" >> "$GITHUB_OUTPUT"
          echo "Using OUTDIR=$CANDIDATE"

      - name: Trigger Vercel deploy (optional; gated off by var)
        if: ${{ vars.SKIP_VERCEL != 'true' }}
        env:
          HOOK: ${{ secrets.VERCEL_DEPLOY_HOOK_URL }}
          BRANCH: ${{ github.ref_name }}
          REPO: ${{ github.repository }}
        shell: bash
        run: |
          if [ -n "${HOOK:-}" ]; then
            echo "POST $HOOK"
            curl -fsSL -X POST -H "Content-Type: application/json" \
              -d "{\"branch\":\"$BRANCH\",\"repo\":\"$REPO\"}" \
              "$HOOK"
          else
            echo "No Vercel hook configured. Skipping."
          fi

      - name: Compute Unraid deploy path
        id: target
        shell: bash
        env:
          ENV_NGINX_DEPLOY_PATH: ${{ vars.NGINX_DEPLOY_PATH }}
          ENV_NGINX_ROOT: ${{ vars.NGINX_ROOT }}
          ENV_APP_ENV: ${{ vars.APP_ENV }}
          ENV_APP_NAME: ${{ vars.APP_NAME || 'libertytax-pnl-webapp' }}
        run: |
          set -euo pipefail
          if [ -n "${ENV_NGINX_DEPLOY_PATH:-}" ]; then
            TARGET="$ENV_NGINX_DEPLOY_PATH"
          else
            TARGET="${ENV_NGINX_ROOT}/${ENV_APP_ENV}/${ENV_APP_NAME}"
          fi
          mkdir -p "$TARGET"
          printf 'path=%s\n' "$TARGET" >> "$GITHUB_OUTPUT"
          echo "Computed deploy path: $TARGET"

      - name: Copy build to Unraid Nginx
        shell: bash
        run: |
          set -euo pipefail
          DEST="${{ steps.target.outputs.path }}"
          SRC="${{ steps.outdir.outputs.outdir }}"
          echo "Deploy path: $DEST"
          rsync -av --delete "${SRC}/" "${DEST}/"
