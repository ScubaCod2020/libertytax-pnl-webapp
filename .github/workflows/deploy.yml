name: PNL — Unraid Build & Deploy

on:
  push:
    branches:
      - main
      - staging
      - feature/**
      - chore/**
  workflow_dispatch:

# prevent overlapping deploys per branch
concurrency:
  group: unraid-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy-unraid:
    name: 🟩 Build & Deploy to Unraid (NGINX)
    runs-on: [self-hosted, unraid-citadel-1]
    environment:
      # main → production, everything else → preview
      name: ${{ github.ref_name == 'main' && 'production' || 'preview' }}

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔎 Locate Angular workspace
        id: ws
        shell: bash
        run: |
          set -euo pipefail
          if [ -d angular ]; then DIR="angular"
          elif [ -f angular.json ]; then DIR="."
          else
            CAND="$(git ls-files | grep -E '(^|/)angular\.json$' | head -n1 || true)"
            [ -n "$CAND" ] || { echo "❌ No angular.json found"; exit 1; }
            DIR="$(dirname "$CAND")"
          fi
          echo "dir=$DIR" >> "$GITHUB_OUTPUT"
          echo "Angular workspace: $DIR"

      - name: 📦 Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: ${{ steps.ws.outputs.dir }}/package-lock.json

      - name: 🛠️ Install deps
        working-directory: ${{ steps.ws.outputs.dir }}
        run: npm ci

      - name: 🧱 Build
        working-directory: ${{ steps.ws.outputs.dir }}
        env:
          BUILD_CONFIGURATION: ${{ vars.BUILD_CONFIGURATION || 'production' }}
        run: npx ng build --configuration "$BUILD_CONFIGURATION"

      - name: 📂 Resolve OUTDIR (honor DIST_DIR)
        id: out
        shell: bash
        env:
          DIST_DIR: ${{ vars.DIST_DIR }}
        run: |
          set -euo pipefail
          ROOT="${{ steps.ws.outputs.dir }}"
          if [ -n "${DIST_DIR:-}" ]; then
            OUT="$ROOT/$DIST_DIR"
          else
            # Angular 17+ default
            OUT="$ROOT/dist/*/browser"
          fi
          CAND="$(ls -d ${OUT} 2>/dev/null | head -n1 || true)"
          [ -d "$CAND" ] || { echo "❌ Build output not found at pattern: $OUT"; find "$ROOT/dist" -maxdepth 3 -type d -print; exit 1; }
          echo "outdir=$CAND" >> "$GITHUB_OUTPUT"
          echo "Using OUTDIR=$CAND"

      - name: 🗺️ Compute deploy target (Environment var)
        id: target
        shell: bash
        env:
          ENV_NGINX_DEPLOY_PATH: ${{ vars.ENV_NGINX_DEPLOY_PATH }}
        run: |
          set -euo pipefail
          [ -n "${ENV_NGINX_DEPLOY_PATH:-}" ] || { echo "❌ Set ENV_NGINX_DEPLOY_PATH in the GitHub Environment"; exit 1; }
          mkdir -p "$ENV_NGINX_DEPLOY_PATH"
          echo "path=$ENV_NGINX_DEPLOY_PATH" >> "$GITHUB_OUTPUT"
          echo "Deploy target: $ENV_NGINX_DEPLOY_PATH"

      - name: 🚚 Rsync to Unraid
        shell: bash
        run: |
          set -euo pipefail
          SRC="${{ steps.out.outputs.outdir }}"
          DEST="${{ steps.target.outputs.path }}"
          echo "Deploying $SRC -> $DEST"
          rsync -av --delete --chmod=Du=rwx,Dgo=rx,Fu=rw,Fgo=r "${SRC}/" "${DEST}/"

      - name: 🏷️ Write marker & list dest
        shell: bash
        run: |
          set -euo pipefail
          DEST="${{ steps.target.outputs.path }}"
          TS="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          {
            echo "commit=${GITHUB_SHA}"
            echo "timestamp=${TS}"
            echo "runner=${RUNNER_NAME:-unknown}"
            echo "environment=${{ job.environment.name }}"
          } > "${DEST}/.deployed.txt"

          echo "---- .deployed.txt ----"; cat "${DEST}/.deployed.txt" || true
          echo "---- dest listing ----";  ls -lah "${DEST}" | head -120 || true
          echo "---- index.html head ----"; sed -n '1,60p' "${DEST}/index.html" || true

      - name: 🧾 Fix perms (Unraid typical) — optional
        shell: bash
        continue-on-error: true
        run: |
          DEST="${{ steps.target.outputs.path }}"
          chown -R nobody:users "$DEST" || true
          find "$DEST" -type d -exec chmod 775 {} \; || true
          find "$DEST" -type f -exec chmod 664 {} \; || true

      - name: 🔄 Reload NGINX (if configured)
        if: ${{ vars.ENV_NGINX_RELOAD_CMD != '' }}
        shell: bash
        env:
          RELOAD_CMD: ${{ vars.ENV_NGINX_RELOAD_CMD }}
        run: |
          set -euo pipefail
          echo "Reloading NGINX with: $RELOAD_CMD"
          bash -lc "$RELOAD_CMD"
