name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip testing (emergency deployment only)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'

jobs:
  # Pre-deployment testing (comprehensive)
  pre-deployment-tests:
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run comprehensive test suite
      run: |
        echo "🧪 Running comprehensive pre-deployment tests..."
        
        # Run all automated tests
        echo "📊 Running calculation tests..."
        node scripts/test-calculations.js
        
        echo "🔍 Running edge case tests..."
        node scripts/comprehensive-edge-case-tests.js
        
        echo "🔄 Running regression tests..."
        node scripts/regression-test.js
        
        echo "✅ All automated tests completed"
      
    - name: Build and validate
      run: |
        echo "🏗️ Building application..."
        npm run build
        
        # Validate build
        echo "🔍 Validating build artifacts..."
        [ -f "dist/index.html" ] || (echo "❌ Missing index.html" && exit 1)
        [ -f dist/assets/index-*.js ] || (echo "❌ Missing JavaScript bundle" && exit 1)
        [ -f dist/assets/index-*.css ] || (echo "❌ Missing CSS bundle" && exit 1)
        
        # Check bundle size
        BUNDLE_SIZE=$(stat -c%s "dist/assets/index-*.js" | head -1)
        MAX_SIZE=300000  # 300KB limit (updated for current bundle size)
        echo "Bundle size: $BUNDLE_SIZE bytes"
        if [ $BUNDLE_SIZE -gt $MAX_SIZE ]; then
          echo "❌ Bundle size $BUNDLE_SIZE bytes exceeds limit of $MAX_SIZE bytes"
          exit 1
        fi
        
        echo "✅ Build validation completed"
        
    - name: Browser compatibility test
      run: |
        echo "🌐 Testing browser compatibility..."
        
        # Install Playwright
        npx playwright install --with-deps chromium firefox webkit
        
        # Start preview server
        npm run preview &
        sleep 5
        
        # Create comprehensive browser test
        cat > browser-compatibility-test.js << 'EOF'
        const { test, expect } = require('@playwright/test');

        const testBrowsers = ['chromium', 'firefox', 'webkit'];

        for (const browserName of testBrowsers) {
          test.describe(`${browserName} compatibility`, () => {
            test('app loads and functions correctly', async ({ page }) => {
              await page.goto('http://localhost:4173');
              
              // Check page loads
              await expect(page).toHaveTitle(/Liberty Tax/);
              
              // Check for key elements
              await expect(page.locator('body')).toBeVisible();
              
              // Check for JavaScript errors
              const errors = [];
              page.on('pageerror', error => errors.push(error.message));
              
              // Wait for app to initialize
              await page.waitForTimeout(2000);
              
              if (errors.length > 0) {
                console.log(`❌ JavaScript errors in ${browserName}:`, errors);
                throw new Error(`JavaScript errors detected in ${browserName}`);
              }
              
              console.log(`✅ ${browserName}: No JavaScript errors`);
            });
          });
        }
        EOF
        
        # Run tests on all browsers
        npx playwright test browser-compatibility-test.js --browser=chromium
        npx playwright test browser-compatibility-test.js --browser=firefox  
        npx playwright test browser-compatibility-test.js --browser=webkit
        
        echo "✅ Browser compatibility tests completed"
        
    - name: Mobile responsiveness test
      run: |
        echo "📱 Testing mobile responsiveness..."
        
        cat > mobile-responsiveness-test.js << 'EOF'
        const { chromium } = require('playwright');

        (async () => {
          const browser = await chromium.launch();
          
          const criticalViewports = [
            { name: 'iPhone SE', width: 375, height: 667 },
            { name: 'iPhone 12 Pro', width: 390, height: 844 },
            { name: 'iPad', width: 768, height: 1024 },
            { name: 'Desktop', width: 1920, height: 1080 }
          ];
          
          let allPassed = true;
          
          for (const viewport of criticalViewports) {
            console.log(`Testing ${viewport.name} (${viewport.width}x${viewport.height})`);
            
            const context = await browser.newContext({
              viewport: { width: viewport.width, height: viewport.height }
            });
            
            const page = await context.newPage();
            
            try {
              await page.goto('http://localhost:4173');
              await page.waitForLoadState('networkidle');
              
              // Check for horizontal scroll (mobile issue)
              const bodyWidth = await page.evaluate(() => document.body.scrollWidth);
              if (bodyWidth > viewport.width + 5) { // 5px tolerance
                console.log(`❌ ${viewport.name}: Horizontal scroll detected (${bodyWidth}px > ${viewport.width}px)`);
                allPassed = false;
              } else {
                console.log(`✅ ${viewport.name}: No horizontal scroll`);
              }
              
              // Check if key elements are visible
              const elementsVisible = await page.evaluate(() => {
                const body = document.querySelector('body');
                return body && body.offsetHeight > 0;
              });
              
              if (!elementsVisible) {
                console.log(`❌ ${viewport.name}: Key elements not visible`);
                allPassed = false;
              } else {
                console.log(`✅ ${viewport.name}: Key elements visible`);
              }
              
            } catch (error) {
              console.log(`❌ ${viewport.name}: Error - ${error.message}`);
              allPassed = false;
            }
            
            await context.close();
          }
          
          await browser.close();
          
          if (!allPassed) {
            process.exit(1);
          }
          
          console.log('✅ All mobile responsiveness tests passed');
        })();
        EOF
        
        node mobile-responsiveness-test.js
        
    - name: Performance benchmark
      run: |
        echo "⚡ Running performance benchmarks..."
        
        # Install Lighthouse CI
        npm install -g @lhci/cli
        
        # Run Lighthouse with strict performance criteria
        cat > lighthouserc.js << 'EOF'
        module.exports = {
          ci: {
            collect: {
              url: ['http://localhost:4173'],
              numberOfRuns: 3
            },
            assert: {
              assertions: {
                'categories:performance': ['error', {minScore: 0.8}],
                'categories:accessibility': ['error', {minScore: 0.9}],
                'categories:best-practices': ['error', {minScore: 0.9}],
                'first-contentful-paint': ['error', {maxNumericValue: 3000}],
                'largest-contentful-paint': ['error', {maxNumericValue: 4000}],
                'cumulative-layout-shift': ['error', {maxNumericValue: 0.1}]
              }
            }
          }
        };
        EOF
        
        lhci autorun
        
        echo "✅ Performance benchmarks completed"

  # Staging deployment
  deploy-staging:
    runs-on: ubuntu-latest
    needs: pre-deployment-tests
    if: always() && (needs.pre-deployment-tests.result == 'success' || inputs.skip_tests)
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies and build
      run: |
        npm ci
        npm run build
        
    - name: Deploy to Vercel Staging
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        scope: ${{ secrets.VERCEL_ORG_ID }}
        
    - name: Post-deployment staging tests
      run: |
        echo "🧪 Running post-deployment staging tests..."
        sleep 30  # Wait for deployment to be ready
        
        # Get staging URL (you'll need to adapt this based on your Vercel setup)
        STAGING_URL="https://libertytax-pnl-webapp-staging.vercel.app"
        
        # Basic smoke tests
        curl -f "$STAGING_URL" || (echo "❌ Staging deployment failed - site not accessible" && exit 1)
        
        echo "✅ Staging deployment successful and accessible"

  # Production deployment
  deploy-production:
    runs-on: ubuntu-latest
    needs: [pre-deployment-tests, deploy-staging]
    if: always() && (needs.pre-deployment-tests.result == 'success' || inputs.skip_tests) && (needs.deploy-staging.result == 'success')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies and build
      run: |
        npm ci
        npm run build
        
    - name: Deploy to Vercel Production
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        scope: ${{ secrets.VERCEL_ORG_ID }}
        
    - name: Post-deployment production verification
      run: |
        echo "🔍 Running post-deployment production verification..."
        sleep 60  # Wait for deployment to propagate
        
        # Get production URL (adapt based on your setup)
        PROD_URL="https://libertytax-pnl-webapp.vercel.app"
        
        # Comprehensive post-deployment checks
        echo "Checking production accessibility..."
        curl -f "$PROD_URL" || (echo "❌ Production deployment failed - site not accessible" && exit 1)
        
        # Check for critical functionality (basic)
        echo "Checking for critical elements..."
        RESPONSE=$(curl -s "$PROD_URL")
        echo "$RESPONSE" | grep -q "Liberty Tax" || (echo "❌ Missing Liberty Tax branding" && exit 1)
        echo "$RESPONSE" | grep -q "script" || (echo "❌ Missing JavaScript" && exit 1)
        
        echo "✅ Production deployment successful and verified"
        
    - name: Create deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Stage | Status | URL |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|-----|" >> $GITHUB_STEP_SUMMARY
        echo "| Pre-deployment Tests | ✅ Passed | - |" >> $GITHUB_STEP_SUMMARY
        echo "| Staging Deployment | ✅ Successful | https://libertytax-pnl-webapp-staging.vercel.app |" >> $GITHUB_STEP_SUMMARY
        echo "| Production Deployment | ✅ Successful | https://libertytax-pnl-webapp.vercel.app |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Deployment Complete!" >> $GITHUB_STEP_SUMMARY
        echo "The Liberty Tax P&L webapp has been successfully deployed to production." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
        echo "- Monitor application performance" >> $GITHUB_STEP_SUMMARY
        echo "- Run manual spot checks on key functionality" >> $GITHUB_STEP_SUMMARY
        echo "- Verify mobile compatibility on actual devices" >> $GITHUB_STEP_SUMMARY

  # Rollback workflow (manual trigger)
  rollback:
    runs-on: ubuntu-latest
    if: failure()
    environment: production
    
    steps:
    - name: Rollback notification
      run: |
        echo "## ⚠️ Deployment Failed - Rollback Required" >> $GITHUB_STEP_SUMMARY
        echo "The deployment process failed. Please:" >> $GITHUB_STEP_SUMMARY
        echo "1. Review the failed job logs" >> $GITHUB_STEP_SUMMARY
        echo "2. Fix any issues" >> $GITHUB_STEP_SUMMARY
        echo "3. Consider manual rollback if production is affected" >> $GITHUB_STEP_SUMMARY
        echo "4. Re-run deployment after fixes" >> $GITHUB_STEP_SUMMARY
