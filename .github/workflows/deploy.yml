name: Build & Deploy

on:
  push:
    branches:
      - chore/**
      - feature/**
      - staging
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    name: Build & Deploy
    runs-on: self-hosted
    # If your runner has a custom label, add it here too:
    # runs-on: [self-hosted, unraid-citadel-1]

    environment:
      name: preview  # <-- this pulls your Environment Variables (APP_ENV, DIST_DIR, etc.)

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: angular/package-lock.json

      - name: Resolve Angular workspace
        id: ws
        shell: bash
        run: |
          set -euo pipefail
          if [ -d angular ]; then DIR="angular"
          elif [ -f angular.json ]; then DIR="."
          else
            CAND="$(git ls-files | grep -E '(^|/)angular\.json$' | head -n1 || true)"
            [ -n "$CAND" ] || { echo "❌ No angular.json found"; exit 1; }
            DIR="$(dirname "$CAND")"
          fi
          echo "dir=$DIR" >> "$GITHUB_OUTPUT"
          echo "Angular workspace: $DIR"

      - name: Install deps
        working-directory: ${{ steps.ws.outputs.dir }}
        run: npm ci

      - name: Build
        working-directory: ${{ steps.ws.outputs.dir }}
        env:
          BUILD_CONFIGURATION: ${{ vars.BUILD_CONFIGURATION || 'production' }}
        run: npx ng build --configuration "$BUILD_CONFIGURATION"

      - name: Resolve OUTDIR (honor DIST_DIR, hard fail if missing)
        id: out
        shell: bash
        env:
          DIST_DIR: ${{ vars.DIST_DIR }}
        run: |
          set -euo pipefail
          ROOT="${{ steps.ws.outputs.dir }}"

          if [ -n "${DIST_DIR:-}" ]; then
            OUT="$ROOT/$DIST_DIR"
          else
            OUT="$ROOT/dist/angular/browser"
          fi

          [ -d "$OUT" ] || { echo "❌ Build output not found at: $OUT"; find "$ROOT/dist" -maxdepth 3 -type d -print || true; exit 1; }

          echo "outdir=$OUT" >> "$GITHUB_OUTPUT"
          echo "Using OUTDIR=$OUT"

      - name: Compute deploy target (ENV_NGINX_DEPLOY_PATH wins)
        id: target
        shell: bash
        env:
          ENV_PATH: ${{ vars.ENV_NGINX_DEPLOY_PATH }}
          FALLBACK_PATH: ${{ vars.NGINX_DEPLOY_PATH }}
        run: |
          set -euo pipefail
          if [ -n "${ENV_PATH:-}" ]; then
            DEST="$ENV_PATH"
          elif [ -n "${FALLBACK_PATH:-}" ]; then
            DEST="$FALLBACK_PATH"
          else
            echo "❌ No deploy path provided. Set ENV_NGINX_DEPLOY_PATH in the environment."
            exit 1
          fi
          mkdir -p "$DEST"
          echo "path=$DEST" >> "$GITHUB_OUTPUT"
          echo "Deploy target: $DEST"

      - name: Rsync to target (with sane perms)
        shell: bash
        run: |
          set -euo pipefail
          SRC="${{ steps.out.outputs.outdir }}"
          DEST="${{ steps.target.outputs.path }}"
          echo "Deploying from $SRC -> $DEST"
          rsync -av --delete --chmod=Du=rwx,Dgo=rx,Fu=rw,Fgo=r "${SRC}/" "${DEST}/"

      - name: Write deployment marker & list dest
        shell: bash
        run: |
          set -euo pipefail
          DEST="${{ steps.target.outputs.path }}"
          TS="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          {
            echo "commit=${GITHUB_SHA}"
            echo "timestamp=${TS}"
            echo "runner=${RUNNER_NAME:-unknown}"
            echo "env=${{ vars.APP_ENV || 'unknown' }}"
          } > "${DEST}/.deployed.txt"

          echo "---- .deployed.txt ----"
          cat "${DEST}/.deployed.txt" || true

          echo "---- dest listing ----"
          ls -lah "${DEST}" | head -120 || true

          echo "---- index.html head ----"
          sed -n '1,60p' "${DEST}/index.html" || true

      - name: Fix ownership (Unraid typical) — optional
        shell: bash
        continue-on-error: true
        run: |
          DEST="${{ steps.target.outputs.path }}"
          chown -R nobody:users "$DEST" || true
          find "$DEST" -type d -exec chmod 775 {} \; || true
          find "$DEST" -type f -exec chmod 664 {} \; || true

      - name: Reload NGINX if command provided
        if: ${{ vars.ENV_NGINX_RELOAD_CMD != '' }}
        shell: bash
        env:
          RELOAD_CMD: ${{ vars.ENV_NGINX_RELOAD_CMD }}
        run: |
          set -euo pipefail
          echo "Reloading NGINX with: $RELOAD_CMD"
          bash -lc "$RELOAD_CMD"
