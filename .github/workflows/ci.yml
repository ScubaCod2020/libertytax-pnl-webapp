name: CI

on:
  push:
    branches: [main, develop, Dev_09202025, 'feat/**', 'fix/**']
  pull_request:
    branches: [main, develop, Dev_09202025]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Install Angular dependencies (if present)
        run: |
          if [ -f "angular/package.json" ]; then
            cd angular && npm ci
          else
            echo "No angular/package.json; skipping Angular deps"
          fi

      - name: Detect framework
        id: detect
        run: |
          if [ -f "angular.json" ] || [ -f "nx.json" ] || [ -f "angular/angular.json" ]; then
            echo "framework=angular" >> $GITHUB_OUTPUT
          else
            echo "framework=react" >> $GITHUB_OUTPUT
          fi
          if [ -f "angular/angular.json" ]; then
            echo "angular_dir=angular" >> $GITHUB_OUTPUT
          fi

      - name: Lint
        run: |
          if [ "${{ steps.detect.outputs.framework }}" = "angular" ]; then
            if npm run | grep -q "ng lint"; then
              npm run lint || npx ng lint || true
            else
              npx ng lint || true
            fi
          else
            npm run lint
          fi

      - name: Markdown lint
        run: npm run mdlint

      - name: Lint (Angular subfolder)
        if: steps.detect.outputs.angular_dir == 'angular'
        run: |
          cd angular && npx ng lint || true

      - name: Type check
        run: |
          if npm run | grep -q "type-check"; then
            npm run type-check
          else
            echo "No type-check script; skipping"
          fi

      - name: Unit tests
        run: |
          if [ "${{ steps.detect.outputs.framework }}" = "angular" ]; then
            if npm run | grep -q "ng test"; then
              npx ng test --watch=false --browsers=ChromeHeadless || true
            elif npm run | grep -q "test"; then
              npm run test --if-present
            else
              echo "No Angular test configured; skipping"
            fi
          else
            npm run test --if-present
          fi

      - name: Unit tests (Angular subfolder)
        if: steps.detect.outputs.angular_dir == 'angular'
        run: |
          cd angular && npx ng test --watch=false --browsers=ChromeHeadless || true

      - name: Build
        run: |
          if [ "${{ steps.detect.outputs.framework }}" = "angular" ]; then
            if npm run | grep -q "ng build"; then
              npx ng build --configuration=production || npx ng build
            else
              echo "No Angular build configured; skipping"
            fi
          else
            npm run build
          fi

      - name: Build (Angular subfolder)
        if: steps.detect.outputs.angular_dir == 'angular'
        run: |
          cd angular && npx ng build --configuration=production || npx ng build

      - name: E2E (Playwright - React only)
        if: steps.detect.outputs.framework == 'react'
        run: |
          if [ -f "playwright.config.ts" ] || [ -f "playwright.config.js" ]; then
            npx playwright install --with-deps
            npm run test:e2e --if-present
          else
            echo "No Playwright config; skipping e2e"
          fi

      - name: Generate components graph (Mermaid)
        run: npm run graph:components

      - name: Upload components graph artifact
        uses: actions/upload-artifact@v4
        with:
          name: components-graph
          path: |
            docs/architecture/components-graph.md
            docs/architecture/components-graph.mmd

      - name: Render components graph (SVG)
        run: npm run graph:render

      - name: Upload components graph SVG
        uses: actions/upload-artifact@v4
        with:
          name: components-graph-svg
          path: docs/architecture/components-graph.svg

      - name: Validate docs indexes (non-blocking)
        run: npm run docs:validate-index || true

      - name: API health (non-blocking)
        run: |
          (curl -fsS http://localhost:5000/api/health && echo "API health OK") || echo "API not reachable (expected if backend not running)"

  approval:
    name: Staging approval gate
    runs-on: ubuntu-latest
    needs: build-and-test
    if: ${{ success() && github.event_name == 'pull_request' }}
    environment:
      name: staging
    steps:
      - run: echo "Awaiting approval to deploy preview..."

  vercel-preview:
    name: Vercel Preview Deploy
    runs-on: ubuntu-latest
    needs: approval
    if: ${{ success() && github.event_name == 'pull_request' }}
    environment:
      name: preview
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Pull Vercel env (preview)
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel (Preview)
        run: vercel --token=${{ secrets.VERCEL_TOKEN }} --confirm --scope ${{ secrets.VERCEL_ORG_ID }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
