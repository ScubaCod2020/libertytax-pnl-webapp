name: AI Code Review Assistant

on:
  pull_request:
    types: [opened, synchronize, ready_for_review]
  issue_comment:
    types: [created]

jobs:
  ai-review-prep:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Analyze PR changes
      id: analyze-changes
      run: |
        # Get changed files
        CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
        echo "changed_files<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # Count changes by type
        TS_CHANGES=$(echo "$CHANGED_FILES" | grep -E '\.(ts|tsx)$' | wc -l)
        JS_CHANGES=$(echo "$CHANGED_FILES" | grep -E '\.(js|jsx)$' | wc -l)
        CSS_CHANGES=$(echo "$CHANGED_FILES" | grep -E '\.(css|scss)$' | wc -l)
        TEST_CHANGES=$(echo "$CHANGED_FILES" | grep -E '(test|spec)\.' | wc -l)
        CONFIG_CHANGES=$(echo "$CHANGED_FILES" | grep -E '\.(json|yml|yaml|config)$' | wc -l)
        
        echo "ts_changes=$TS_CHANGES" >> $GITHUB_OUTPUT
        echo "js_changes=$JS_CHANGES" >> $GITHUB_OUTPUT
        echo "css_changes=$CSS_CHANGES" >> $GITHUB_OUTPUT
        echo "test_changes=$TEST_CHANGES" >> $GITHUB_OUTPUT
        echo "config_changes=$CONFIG_CHANGES" >> $GITHUB_OUTPUT
        
    - name: Generate AI review context
      uses: actions/github-script@v7
      with:
        script: |
          const changedFiles = `${{ steps.analyze-changes.outputs.changed_files }}`;
          const tsChanges = '${{ steps.analyze-changes.outputs.ts_changes }}';
          const testChanges = '${{ steps.analyze-changes.outputs.test_changes }}';
          
          const aiReviewComment = `
            ## ü§ñ AI Code Review Assistant Ready!
            
            Hey @codex! This PR is ready for your expert analysis. Here's what changed:
            
            ### üìä Change Summary
            - **TypeScript/React files:** ${tsChanges} modified
            - **Test files:** ${testChanges} modified
            - **Total files changed:** ${changedFiles.split('\n').filter(f => f.trim()).length}
            
            ### üéØ Key Areas for AI Review
            ${tsChanges > 0 ? '- **React Components:** Check for hooks usage, performance, accessibility' : ''}
            ${testChanges > 0 ? '- **Testing:** Verify test coverage and quality' : ''}
            ${changedFiles.includes('package.json') ? '- **Dependencies:** Review any new packages added' : ''}
            ${changedFiles.includes('vite.config') ? '- **Build Config:** Validate build configuration changes' : ''}
            
            ### üîç Specific Questions for @codex:
            1. **Code Quality:** Any potential bugs or improvements you spot?
            2. **Performance:** Are there any performance implications?
            3. **Best Practices:** Following React/TypeScript best practices?
            4. **Testing:** Is the test coverage adequate?
            5. **Security:** Any security considerations?
            
            ### üìã Liberty Tax P&L Context
            This is a financial calculator webapp with:
            - **Dual-entry system** (percentage ‚Üî dollar calculations)
            - **Multi-step wizard** (Welcome ‚Üí Inputs ‚Üí Review ‚Üí Dashboard)
            - **Regional differences** (US vs Canada)
            - **Mobile-first design** with responsive layouts
            - **Debug panel** for troubleshooting
            
            ### üßÆ Critical Calculation Areas
            If this PR touches calculations, please verify:
            - Mathematical accuracy of formulas
            - Dual-entry synchronization logic
            - Regional calculation differences
            - KPI calculations (Net Income, Margin, Cost per Return)
            
            ---
            **@codex** - Ready for your analysis! Feel free to dive deep into any areas that catch your attention. üöÄ
            `;

          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number,
            body: aiReviewComment
          });

  ai-testing-assistant:
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '@codex') && contains(github.event.comment.body, 'test')
    
    steps:
    - name: AI testing guidance
      uses: actions/github-script@v7
      with:
        script: |
          const comment = context.payload.comment.body;
          const isPR = context.payload.issue.pull_request !== undefined;
          
          if (isPR) {
            const testingGuidance = "üß™ AI Testing Assistant Activated! Since you mentioned testing, here are key test areas for this project: Calculation Tests (run node scripts/test-calculations.js), Browser Tests (npm run test:browser), Mobile Tests (npm run test:mobile). Focus on wizard flow, dual-entry fields, and regional differences (US vs CA). What specific testing scenarios would you recommend?";

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: testingGuidance
            });
          }

  ai-calculation-assistant:
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '@codex') && (contains(github.event.comment.body, 'calculation') || contains(github.event.comment.body, 'math'))
    
    steps:
    - name: AI calculation guidance
      uses: actions/github-script@v7
      with:
        script: |
          const calculationContext = "üßÆ AI Calculation Expert Activated! Key formulas: Tax Prep Income = Avg Net Fee √ó Returns, Net Income = Gross Fees - Discounts - Expenses, Net Margin = (Net Income / Tax Prep Income) √ó 100. Regional differences: US (no TaxRush), Canada (includes TaxRush). Watch for division by zero, percentage validation (0-100%), and dual-entry sync. What calculation logic would you like me to analyze?";

          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.issue.number,
            body: calculationContext
          });

  ai-mobile-assistant:
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '@codex') && contains(github.event.comment.body, 'mobile')
    
    steps:
    - name: AI mobile guidance
      uses: actions/github-script@v7
      with:
        script: |
          const mobileContext = "üì± AI Mobile Expert Activated! Key mobile requirements: 44px minimum touch targets, no horizontal scroll, proper keyboard behavior. Test devices: iPhone SE (375x667), iPhone 12 Pro (390x844), Galaxy S21 (360x800), iPad (768x1024). Focus on wizard navigation, dual-entry fields, debug panel layout. Performance targets: <5s load time, <250KB bundle, <300ms touch response. What mobile aspects should I analyze?";

          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.issue.number,
            body: mobileContext
          });
