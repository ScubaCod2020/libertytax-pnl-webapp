name: AI Code Review Assistant

on:
  pull_request:
    types: [opened, synchronize, ready_for_review]
  issue_comment:
    types: [created]

jobs:
  ai-review-prep:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Analyze PR changes
      id: analyze-changes
      run: |
        # Get changed files
        CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
        echo "changed_files<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # Count changes by type
        TS_CHANGES=$(echo "$CHANGED_FILES" | grep -E '\.(ts|tsx)$' | wc -l)
        JS_CHANGES=$(echo "$CHANGED_FILES" | grep -E '\.(js|jsx)$' | wc -l)
        CSS_CHANGES=$(echo "$CHANGED_FILES" | grep -E '\.(css|scss)$' | wc -l)
        TEST_CHANGES=$(echo "$CHANGED_FILES" | grep -E '(test|spec)\.' | wc -l)
        CONFIG_CHANGES=$(echo "$CHANGED_FILES" | grep -E '\.(json|yml|yaml|config)$' | wc -l)
        
        echo "ts_changes=$TS_CHANGES" >> $GITHUB_OUTPUT
        echo "js_changes=$JS_CHANGES" >> $GITHUB_OUTPUT
        echo "css_changes=$CSS_CHANGES" >> $GITHUB_OUTPUT
        echo "test_changes=$TEST_CHANGES" >> $GITHUB_OUTPUT
        echo "config_changes=$CONFIG_CHANGES" >> $GITHUB_OUTPUT
        
    - name: Generate AI review context
      uses: actions/github-script@v7
      with:
        script: |
          const changedFiles = `${{ steps.analyze-changes.outputs.changed_files }}`;
          const tsChanges = '${{ steps.analyze-changes.outputs.ts_changes }}';
          const testChanges = '${{ steps.analyze-changes.outputs.test_changes }}';
          
          const aiReviewComment = `## ü§ñ AI Code Review Assistant Ready!
          
Hey @codex! This PR is ready for your expert analysis. Here's what changed:

### üìä Change Summary
- **TypeScript/React files:** ${tsChanges} modified
- **Test files:** ${testChanges} modified
- **Total files changed:** ${changedFiles.split('\n').filter(f => f.trim()).length}

### üéØ Key Areas for AI Review
${tsChanges > 0 ? '- **React Components:** Check for hooks usage, performance, accessibility' : ''}
${testChanges > 0 ? '- **Testing:** Verify test coverage and quality' : ''}
${changedFiles.includes('package.json') ? '- **Dependencies:** Review any new packages added' : ''}
${changedFiles.includes('vite.config') ? '- **Build Config:** Validate build configuration changes' : ''}

### üîç Specific Questions for @codex:
1. **Code Quality:** Any potential bugs or improvements you spot?
2. **Performance:** Are there any performance implications?
3. **Best Practices:** Following React/TypeScript best practices?
4. **Testing:** Is the test coverage adequate?
5. **Security:** Any security considerations?

### üìã Liberty Tax P&L Context
This is a financial calculator webapp with:
- **Dual-entry system** (percentage ‚Üî dollar calculations)
- **Multi-step wizard** (Welcome ‚Üí Inputs ‚Üí Review ‚Üí Dashboard)
- **Regional differences** (US vs Canada)
- **Mobile-first design** with responsive layouts
- **Debug panel** for troubleshooting

### üßÆ Critical Calculation Areas
If this PR touches calculations, please verify:
- Mathematical accuracy of formulas
- Dual-entry synchronization logic
- Regional calculation differences
- KPI calculations (Net Income, Margin, Cost per Return)

---
**@codex** - Ready for your analysis! Feel free to dive deep into any areas that catch your attention. üöÄ`;

          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number,
            body: aiReviewComment
          });

  ai-testing-assistant:
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '@codex') && contains(github.event.comment.body, 'test')
    
    steps:
    - name: AI testing guidance
      uses: actions/github-script@v7
      with:
        script: |
          const comment = context.payload.comment.body;
          const isPR = context.payload.issue.pull_request !== undefined;
          
          if (isPR) {
            const testingGuidance = `## üß™ AI Testing Assistant Activated!
            
Since you mentioned testing, here's our comprehensive testing context for @codex:

### üéØ Testing Checklist for This Project
- [ ] **Calculation Tests:** Run \`node scripts/test-calculations.js\`
- [ ] **Regression Tests:** Run \`node scripts/regression-test.js\`  
- [ ] **Edge Cases:** Run \`node scripts/comprehensive-edge-case-tests.js\`
- [ ] **Browser Tests:** Run \`npm run test:browser\`
- [ ] **Mobile Tests:** Run \`npm run test:mobile\`

### üì± Manual Testing Focus
- **Wizard Flow:** Welcome ‚Üí Inputs ‚Üí Review ‚Üí Dashboard
- **Dual-Entry:** Test percentage ‚Üî dollar sync on all 17 expense fields
- **Regional:** Test US vs CA differences (TaxRush fields)
- **Mobile:** Test on iPhone SE, iPhone 12 Pro, iPad
- **Debug Panel:** Verify all tabs work (Storage, Calc, State, Perf, Thresholds)

### üßÆ Calculation Verification
Key formulas to verify:
\`\`\`javascript
// Gross Fees = Tax Prep Income / (1 - Discount %)
grossFees = taxPrepIncome / (1 - discountsPct / 100)

// Net Income = Gross Fees - Discounts - Total Expenses  
netIncome = grossFees - (grossFees * discountsPct / 100) - totalExpenses

// Net Margin = Net Income / Tax Prep Income * 100
netMargin = (netIncome / taxPrepIncome) * 100

// Cost per Return = Total Expenses / Tax Prep Returns
costPerReturn = totalExpenses / taxPrepReturns
\`\`\`

### üîç Edge Cases to Test
- Zero values (0%, $0)
- Maximum values (100%, large numbers)
- Invalid inputs (negative, non-numeric)
- Division by zero scenarios
- Regional switching (US ‚Üî CA)

**@codex** - What specific testing scenarios would you recommend for this change?`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: testingGuidance
            });
          }

  ai-calculation-assistant:
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '@codex') && (contains(github.event.comment.body, 'calculation') || contains(github.event.comment.body, 'math'))
    
    steps:
    - name: AI calculation guidance
      uses: actions/github-script@v7
      with:
        script: |
          const calculationContext = `## üßÆ AI Calculation Expert Activated!

@codex - Here's the complete calculation context for the Liberty Tax P&L webapp:

### üí∞ Core Financial Formulas

#### Revenue Calculations
\`\`\`javascript
// Tax Prep Income = Average Net Fee √ó Tax Prep Returns
taxPrepIncome = avgNetFee * taxPrepReturns

// TaxRush Income = TaxRush ANF √ó TaxRush Returns (Canada only)
taxRushIncome = taxRushANF * taxRushReturns  // CA only, 0 for US

// Total Income = Tax Prep + TaxRush + Other Income
totalIncome = taxPrepIncome + taxRushIncome + otherIncome
\`\`\`

#### Expense Calculations (Dual-Entry System)
\`\`\`javascript
// Percentage to Dollar
dollarAmount = (percentage / 100) * calculationBase

// Dollar to Percentage  
percentage = (dollarAmount / calculationBase) * 100

// Different calculation bases:
// - Salaries, Rent, Royalties: Use Gross Fees as base
// - Employee Deductions: Use Salaries amount as base
// - Fixed amounts (Telephone, Utilities): No percentage conversion
\`\`\`

#### Key Performance Indicators
\`\`\`javascript
// Gross Fees (includes discount adjustment)
grossFees = taxPrepIncome / (1 - discountsPct / 100)

// Net Income
netIncome = grossFees - (grossFees * discountsPct / 100) - totalExpenses

// Net Margin
netMargin = (netIncome / taxPrepIncome) * 100

// Cost per Return
costPerReturn = totalExpenses / taxPrepReturns
\`\`\`

### üéØ Regional Differences
- **US:** TaxRush fields hidden, TaxRush income = 0
- **Canada:** TaxRush fields visible, included in calculations

### ‚ö†Ô∏è Edge Cases to Handle
- Division by zero (0 returns, 0 revenue)
- Negative growth percentages
- 100% expense percentages
- Very large numbers (999,999,999)
- Floating point precision issues

### üîç Validation Rules
- Percentages: 0% to 100% (reject >100%)
- Dollar amounts: $0 to $999,999,999
- Return counts: Positive integers only
- Growth rates: -99% to +999%

**What specific calculation logic would you like me to analyze or verify?**`;

          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.issue.number,
            body: calculationContext
          });

  ai-mobile-assistant:
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '@codex') && contains(github.event.comment.body, 'mobile')
    
    steps:
    - name: AI mobile guidance
      uses: actions/github-script@v7
      with:
        script: |
          const mobileContext = `## üì± AI Mobile Expert Activated!

@codex - Here's the mobile-specific context for the Liberty Tax P&L webapp:

### üéØ Critical Mobile Requirements
- **Touch Targets:** Minimum 44px (Apple guidelines)
- **No Horizontal Scroll:** Content must fit viewport width
- **Keyboard Behavior:** Must not obscure input fields
- **Orientation:** Support both portrait and landscape

### üìê Target Devices & Viewports
\`\`\`javascript
const mobileViewports = [
  { name: 'iPhone SE', width: 375, height: 667 },      // Smallest target
  { name: 'iPhone 12 Pro', width: 390, height: 844 },  // Standard mobile
  { name: 'Galaxy S21', width: 360, height: 800 },     // Android standard
  { name: 'iPad', width: 768, height: 1024 }           // Tablet
];
\`\`\`

### üß™ Mobile Testing Checklist
- [ ] **Wizard Navigation:** All buttons tappable on mobile
- [ ] **Dual-Entry Fields:** Easy to switch between % and $ on touch
- [ ] **Debug Panel:** Doesn't break mobile layout when opened
- [ ] **Dropdowns:** Don't extend off-screen
- [ ] **Keyboard:** Numeric keypad for number fields
- [ ] **Scrolling:** Vertical only, no horizontal scroll

### üé® Mobile-Specific CSS Considerations
\`\`\`css
/* Touch targets */
button, input, select {
  min-height: 44px;
  min-width: 44px;
}

/* Prevent zoom on input focus */
input[type="number"] {
  font-size: 16px; /* Prevents zoom on iOS */
}

/* Mobile-first responsive design */
@media (max-width: 768px) {
  /* Stack elements vertically */
  /* Increase spacing for touch */
  /* Hide non-essential elements */
}
\`\`\`

### üì± Mobile Performance Targets
- **Load Time:** < 5 seconds on 3G
- **Bundle Size:** < 250KB for mobile
- **Memory Usage:** < 50MB on mobile devices
- **Touch Response:** < 300ms

### üîç Common Mobile Issues
- Buttons too small to tap
- Horizontal scrolling
- Keyboard obscuring inputs
- Layout breaking on orientation change
- Touch gestures interfering with app functionality

**What specific mobile aspects would you like me to analyze for this change?**`;

          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.issue.number,
            body: mobileContext
          });
