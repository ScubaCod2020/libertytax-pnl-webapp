name: 🔄 Continuous Integration

on:
  push:
    branches: [ main, develop, 'feat/**', 'fix/**' ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20.x'
  PYTHON_VERSION: '3.11'

jobs:
  # ==========================================
  # 🧪 Testing Jobs (Parallel Execution)
  # ==========================================
  
  lint:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🔧 Install dependencies
        run: npm ci
        
      - name: 🔍 TypeScript compilation check
        run: npx tsc --noEmit
        
      - name: 🎨 ESLint check
        run: npx eslint src --ext .ts,.tsx --max-warnings 0
        continue-on-error: true
        
      - name: 💄 Prettier check
        run: npx prettier --check "src/**/*.{ts,tsx,css}"
        continue-on-error: true

  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['18.x', '20.x']
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: 🔧 Install dependencies
        run: npm ci
        
      - name: 🧪 Run unit tests
        run: npm run test:unit
        continue-on-error: true
        
      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '20.x'
        with:
          directory: ./coverage/

  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🔧 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build application
        run: npm run build
        
      - name: 🔗 Run integration tests
        run: npm run test:integration

  browser-tests:
    name: 🌐 End-to-End Browser Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🔧 Install dependencies
        run: npm ci
        
      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps
        
      - name: 🏗️ Build application
        run: npm run build
        
      - name: 🚀 Start preview server
        run: npm run preview &
        
      - name: ⏳ Wait for server
        run: npx wait-on http://localhost:4173 --timeout 30000
        
      - name: 🌐 Run Playwright tests
        run: npx playwright test
        
      - name: 📤 Upload Playwright report
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  mobile-tests:
    name: 📱 Mobile & Responsive Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🔧 Install dependencies
        run: npm ci
        
      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps
        
      - name: 🏗️ Build application
        run: npm run build
        
      - name: 🚀 Start preview server
        run: npm run preview &
        
      - name: ⏳ Wait for server
        run: npx wait-on http://localhost:4173 --timeout 30000
        
      - name: 📱 Run mobile viewport tests
        run: npx playwright test --config=playwright.mobile.config.js

  performance-tests:
    name: ⚡ Performance & Lighthouse Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🔧 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build application
        run: npm run build
        
      - name: 💡 Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x
        
      - name: 🚀 Start preview server
        run: npm run preview &
        
      - name: ⏳ Wait for server
        run: npx wait-on http://localhost:4173 --timeout 30000
        
      - name: ⚡ Run Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  security-audit:
    name: 🔒 Security & Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🔧 Install dependencies
        run: npm ci
        
      - name: 🔒 Run security audit
        run: npm audit --audit-level=moderate
        
      - name: 🛡️ Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --token=${{ secrets.SNYK_TOKEN }}

  python-tests:
    name: 🐍 Python Excel Tool Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: 🔧 Install Python dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov
          
      - name: 🧪 Run Python tests
        run: |
          # Create a simple test to verify Python environment
          python -c "import sys; print(f'Python {sys.version}')"
          # Test if the main Python script can be imported
          python -c "import src.build_pnl_tool_v5; print('Python script imports successfully')"
        
      - name: 🏗️ Test Excel tool build
        run: python src/build_pnl_tool_v5.py

  # ==========================================
  # 📊 Test Results Summary
  # ==========================================
  test-summary:
    name: 📊 Test Results Summary
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, browser-tests, mobile-tests, performance-tests, security-audit, python-tests]
    if: always()
    steps:
      - name: 📊 Test Results Summary
        run: |
          echo "## 🎯 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Linting | ${{ needs.lint.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔗 Integration | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🌐 Browser Tests | ${{ needs.browser-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 📱 Mobile Tests | ${{ needs.mobile-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ⚡ Performance | ${{ needs.performance-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔒 Security | ${{ needs.security-audit.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🐍 Python Tools | ${{ needs.python-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY