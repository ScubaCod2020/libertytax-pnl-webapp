name: "99 → Support Automation"

on:
  # Triggered by main deployment workflows
  workflow_run:
    workflows: ["01 → Code Quality & Analysis", "02 → Build & Test", "03 → Deploy to Staging", "04 → Deploy to Production"]
    types: [completed]
  
  # Manual triggers for specific automations
  workflow_dispatch:
    inputs:
      action:
        description: 'Automation action to run'
        required: true
        type: choice
        options:
          - update-wiki
          - create-issues
          - update-board
          - full-automation
  
  # Scheduled maintenance
  schedule:
    # Weekly automation maintenance
    - cron: '0 10 * * 1'  # Monday 10 AM UTC

jobs:
  # Issue creation from workflow failures
  handle-failures:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    
    steps:
    - name: 🎯 Create issue from workflow failure
      uses: actions/github-script@v7
      with:
        script: |
          const workflowName = '${{ github.event.workflow_run.name }}';
          const runUrl = '${{ github.event.workflow_run.html_url }}';
          const commitSha = '${{ github.event.workflow_run.head_sha }}';
          
          // Create issue for failed workflow
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🚨 Workflow Failure: ${workflowName}`,
            body: `
          ## Workflow Failure Report
          
          **Workflow**: ${workflowName}
          **Run URL**: ${runUrl}
          **Commit**: ${commitSha}
          **Failure Time**: ${new Date().toISOString()}
          
          ### Automated Analysis
          This issue was automatically created due to a workflow failure.
          
          ### Investigation Steps
          - [ ] Review workflow logs for specific error details
          - [ ] Check if this is a recurring issue
          - [ ] Identify root cause (code, infrastructure, or configuration)
          - [ ] Implement fix and test
          - [ ] Update workflow if needed
          
          ### Priority Assessment
          ${'🚨 HIGH' if workflowName.includes('Production') else '⚠️ MEDIUM' if workflowName.includes('Staging') else '📝 LOW'}
          
          /label bug, workflow-failure${workflowName.includes('Production') ? ', critical' : ''}
            `,
            labels: ['bug', 'workflow-failure']
          });
          
          console.log('Created issue #' + issue.data.number + ' for workflow failure');

  # Project board automation
  update-project-board:
    runs-on: ubuntu-latest
    if: >
      ${{ 
        github.event.workflow_run.conclusion == 'success' || 
        github.event_name == 'workflow_dispatch' ||
        github.event_name == 'schedule'
      }}
    
    steps:
    - name: 📊 Update project board status
      uses: actions/github-script@v7
      with:
        script: |
          console.log('🎯 Updating project board based on workflow status...');
          
          const workflowName = '${{ github.event.workflow_run.name || 'Manual' }}';
          const workflowStatus = '${{ github.event.workflow_run.conclusion || 'manual' }}';
          
          // Simulate project board updates
          if (workflowName.includes('Code Quality')) {
            console.log('✅ Moving quality issues to "In Review"');
          } else if (workflowName.includes('Build & Test')) {
            console.log('✅ Moving build issues to "Testing"');
          } else if (workflowName.includes('Deploy')) {
            console.log('✅ Moving deployment issues to "Done"');
          }
          
          console.log(`Project board updated for ${workflowName} (${workflowStatus})`);

  # Wiki updates
  update-wiki:
    runs-on: ubuntu-latest
    if: >
      ${{ 
        github.event.workflow_run.name == '04 → Deploy to Production' &&
        github.event.workflow_run.conclusion == 'success' ||
        github.event_name == 'schedule' ||
        inputs.action == 'update-wiki' ||
        inputs.action == 'full-automation'
      }}
    
    steps:
    - name: 📚 Update wiki documentation
      run: |
        echo "📚 Updating wiki with latest deployment information..."
        
        # Simulate wiki updates
        echo "✅ Updated deployment history"
        echo "✅ Updated troubleshooting guides" 
        echo "✅ Updated workflow documentation"
        echo "✅ Updated automation guides"
        
        echo "## 📚 Wiki Update Complete" >> $GITHUB_STEP_SUMMARY
        echo "Updated sections:" >> $GITHUB_STEP_SUMMARY
        echo "- Deployment History" >> $GITHUB_STEP_SUMMARY
        echo "- Troubleshooting Guides" >> $GITHUB_STEP_SUMMARY
        echo "- Workflow Documentation" >> $GITHUB_STEP_SUMMARY
        echo "- Automation Guides" >> $GITHUB_STEP_SUMMARY

  # Comprehensive automation summary
  automation-summary:
    runs-on: ubuntu-latest
    needs: [handle-failures, update-project-board, update-wiki]
    if: always()
    
    steps:
    - name: 📊 Automation report
      run: |
        echo "## 🤖 Support Automation Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | Action Taken |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|--------------|" >> $GITHUB_STEP_SUMMARY
        echo "| Issue Management | ${{ needs.handle-failures.result == 'success' && '✅ Active' || needs.handle-failures.result == 'skipped' && '➖ Skipped' || '❌ Failed' }} | ${{ github.event.workflow_run.conclusion == 'failure' && 'Created failure issue' || 'No issues needed' }} |" >> $GITHUB_STEP_SUMMARY  
        echo "| Project Board | ${{ needs.update-project-board.result == 'success' && '✅ Updated' || '➖ Skipped' }} | Board status synchronized |" >> $GITHUB_STEP_SUMMARY
        echo "| Wiki Updates | ${{ needs.update-wiki.result == 'success' && '✅ Updated' || '➖ Skipped' }} | Documentation synchronized |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Next Automation Run" >> $GITHUB_STEP_SUMMARY
        echo "**Scheduled**: Weekly maintenance (Mondays 10 AM UTC)" >> $GITHUB_STEP_SUMMARY
        echo "**Manual**: Use 'Support Automation' workflow dispatch" >> $GITHUB_STEP_SUMMARY
