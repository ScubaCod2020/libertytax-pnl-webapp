#!/usr/bin/env node

/**
 * 🤖 AUTOMATED DEBUGGING TOOL UPDATER
 * 
 * Automatically updates all debugging tools with current field mappings.
 * Generated by field-mapping-generator.js at 2025-09-12T14:27:06.372Z
 */

import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)
const rootDir = path.resolve(__dirname, '../..')

// Generated field mappings
const CURRENT_FIELD_MAPPINGS = {
  "coreFields": {
    "region": {
      "wizardField": "region",
      "appStateField": null,
      "sessionField": "region",
      "type": "Region storeType?: 'new' | 'existing' handlesTaxRush?: boolean hasOtherIncome?: boolean lastYearGrossFees?: number lastYearDiscountsAmt?: number lastYearDiscountsPct?: number lastYearTaxPrepReturns?: number lastYearOtherIncome?: number lastYearTaxRushReturns?: number lastYearTaxRushReturnsPct?: number lastYearTaxRushGrossFees?: number lastYearTaxRushAvgNetFee?: number lastYearExpenses?: number expectedGrowthPct?: number expectedRevenue?: number projectedExpenses?: number avgNetFee?: number taxPrepReturns?: number taxRushReturns?: number taxRushReturnsPct?: number taxRushGrossFees?: number taxRushAvgNetFee?: number otherIncome?: number discountsPct?: number discountsAmt?: number projectedAvgNetFee?: number projectedTaxPrepReturns?: number manualAvgNetFee?: number manualTaxPrepIncome?: number manualTaxRushReturns?: number salariesPct?: number empDeductionsPct?: number rentPct?: number telephoneAmt?: number utilitiesAmt?: number localAdvAmt?: number insuranceAmt?: number postageAmt?: number suppliesPct?: number duesAmt?: number bankFeesAmt?: number maintenanceAmt?: number travelEntAmt?: number royaltiesPct?: number advRoyaltiesPct?: number taxRushRoyaltiesPct?: number taxRushShortagesPct?: number miscPct?: number expenses?: ExpenseValues calculatedTotalExpenses?: number",
      "required": true,
      "description": "US or CA - affects calculations and UI"
    }
  },
  "expenseFields": {},
  "wizardOnlyFields": {}
}

console.log('🤖 AUTOMATED DEBUGGING TOOL UPDATER')
console.log('===================================\n')

// Update field mappings in debugging tools
const updateBidirectionalValidator = () => {
  console.log('🔄 Updating bidirectional-data-flow-validator.js...')
  
  const filePath = path.join(rootDir, 'scripts/bidirectional-data-flow-validator.js')
  let content = fs.readFileSync(filePath, 'utf8')
  
  // Replace the FIELD_MAPPINGS constant
  const mappingRegex = /const FIELD_MAPPINGS = \{[\s\S]*?\}\s*\}\s*\}/
  const newMappings = `const FIELD_MAPPINGS = ${JSON.stringify(CURRENT_FIELD_MAPPINGS, null, 2)}`
  
  content = content.replace(mappingRegex, newMappings)
  
  fs.writeFileSync(filePath, content)
  console.log('   ✅ Updated bidirectional validator')
}

const updateRealtimeMonitor = () => {
  console.log('🔄 Updating realtime-field-mapping-monitor.js...')
  
  const filePath = path.join(rootDir, 'scripts/realtime-field-mapping-monitor.js')
  let content = fs.readFileSync(filePath, 'utf8')
  
  // Update critical fields mapping
  const criticalFieldsRegex = /criticalFields: \{[\s\S]*?\},\s*\/\/ Initialize monitoring/
  const criticalFields = Object.entries(CURRENT_FIELD_MAPPINGS.coreFields)
    .filter(([, mapping]) => mapping.required || mapping.type === 'number')
    .map(([fieldName, mapping]) => `    '${fieldName}': {
      description: '${mapping.description || fieldName + ' field'}',
      wizardField: '${mapping.wizardField}',
      appStateField: '${mapping.appStateField}',
      sessionField: '${mapping.sessionField}',
      shouldPersist: true,
      criticalLevel: 'HIGH'
    }`)
    .join(',\n')
  
  const newCriticalFields = `criticalFields: {
${criticalFields}
  },
  
  // Initialize monitoring`
  
  content = content.replace(criticalFieldsRegex, newCriticalFields)
  
  fs.writeFileSync(filePath, content)
  console.log('   ✅ Updated realtime monitor')
}

// Run all updates
const runAllUpdates = () => {
  try {
    updateBidirectionalValidator()
    updateRealtimeMonitor()
    
    console.log('\n🎉 All debugging tools updated successfully!')
    console.log('✅ Field mappings are now synchronized with the codebase')
    console.log('\n🧪 Next steps:')
    console.log('   1. Test your updated debugging tools')
    console.log('   2. Run your validation scripts to verify accuracy')
    console.log('   3. Commit the updated debugging tools')
    
  } catch (error) {
    console.error('❌ Error updating debugging tools:', error.message)
    process.exit(1)
  }
}

runAllUpdates()
