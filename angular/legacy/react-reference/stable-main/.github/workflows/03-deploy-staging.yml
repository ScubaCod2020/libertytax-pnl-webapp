name: "03 ‚Üí Deploy to Staging"

on:
  workflow_run:
    workflows: ["02 ‚Üí Build & Test"]
    types: [completed] 
    branches: [ main, develop, 'feat/*', 'fix/*' ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy even if build failed'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'

jobs:
  # Only deploy if build succeeded (or forced)
  check-prerequisites:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      
    steps:
    - name: üîç Check deployment prerequisites
      id: check
      run: |
        BUILD_SUCCESS="${{ github.event.workflow_run.conclusion == 'success' }}"
        FORCE_DEPLOY="${{ inputs.force_deploy }}"
        
        if [[ "$BUILD_SUCCESS" == "true" || "$FORCE_DEPLOY" == "true" ]]; then
          echo "should_deploy=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Prerequisites met - proceeding with staging deployment"
        else
          echo "should_deploy=false" >> $GITHUB_OUTPUT
          echo "‚ùå Build failed - skipping deployment"
        fi

  deploy-staging:
    runs-on: ubuntu-latest
    needs: check-prerequisites
    if: needs.check-prerequisites.outputs.should_deploy == 'true'
    environment: staging
    
    steps:
    - name: üîÑ Checkout code
      uses: actions/checkout@v4
      
    - name: üìã Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: üì¶ Download build artifacts (REUSE - no rebuild!)
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts-${{ github.sha }}
        path: .
        
    - name: üîç Verify artifacts
      run: |
        echo "üîç Verifying downloaded build artifacts..."
        ls -la dist/ || echo "‚ö†Ô∏è No dist directory found"
        
        if [ ! -d "dist" ]; then
          echo "‚ùå Build artifacts missing - need to rebuild"
          npm ci
          npm run build
        else
          echo "‚úÖ Build artifacts found - skipping rebuild"
        fi
        
    - name: üåê Deploy to Vercel Staging
      uses: amondnet/vercel-action@v25
      id: vercel-deploy
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        scope: ${{ secrets.VERCEL_ORG_ID }}
        
    - name: üîç Staging validation
      run: |
        echo "üîç Validating staging deployment..."
        
        # Get deployment URL
        STAGING_URL="${{ steps.vercel-deploy.outputs.preview-url }}"
        if [ -z "$STAGING_URL" ]; then
          echo "‚ö†Ô∏è No preview URL from Vercel, using fallback..."
          STAGING_URL="https://libertytax-pnl-webapp-git-${{ github.ref_name }}-scubacod2020.vercel.app"
        fi
        
        echo "üåê Testing staging URL: $STAGING_URL"
        
        # Wait for deployment propagation
        echo "‚è≥ Waiting for deployment to propagate (30s)..."
        sleep 30
        
        # Comprehensive validation
        echo "üß™ Running staging validation tests..."
        
        # Test 1: Basic accessibility
        if curl -f -s "$STAGING_URL" > /dev/null; then
          echo "‚úÖ Site is accessible"
        else
          echo "‚ùå Site is not accessible"
          exit 1
        fi
        
        # Test 2: Content validation
        RESPONSE=$(curl -s "$STAGING_URL")
        
        if echo "$RESPONSE" | grep -q "<!doctype html"; then
          echo "‚úÖ Valid HTML document"
        else
          echo "‚ùå Invalid HTML structure"
          exit 1
        fi
        
        if echo "$RESPONSE" | grep -q "Liberty Tax"; then
          echo "‚úÖ Liberty Tax branding present"
        else
          echo "‚ùå Missing Liberty Tax branding"
          exit 1
        fi
        
        if echo "$RESPONSE" | grep -q "assets/.*\.js"; then
          echo "‚úÖ JavaScript bundles found"
        else
          echo "‚ùå JavaScript bundles missing"
          exit 1
        fi
        
        if echo "$RESPONSE" | grep -q '<div id="app">'; then
          echo "‚úÖ React app mount point found"
        else
          echo "‚ùå React app mount point missing"
          exit 1
        fi
        
        echo "‚úÖ All staging validation tests passed!"
        
        # Output staging URL for next workflow
        echo "STAGING_URL=$STAGING_URL" >> $GITHUB_ENV
        
    - name: üìä Staging deployment summary
      run: |
        echo "## üåê Staging Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Deployment** | ‚úÖ **Success** | Vercel staging environment |" >> $GITHUB_STEP_SUMMARY
        echo "| **URL** | üåê **Active** | ${{ env.STAGING_URL }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Content** | ‚úÖ **Validated** | Liberty Tax branding, React app, JS bundles |" >> $GITHUB_STEP_SUMMARY
        echo "| **Accessibility** | ‚úÖ **Tested** | Site loads successfully |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üéØ Manual Testing Checklist:" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] Test wizard flow (region selection ‚Üí inputs ‚Üí results)" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] Verify validation messages appear for invalid inputs" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] Check mobile responsiveness" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] Test US ‚Üî CA region switching" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] Verify accessibility features (screen reader support)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Next Step**: If staging tests pass, ready for production deployment!" >> $GITHUB_STEP_SUMMARY
